<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList</title>
    <url>/2020/05/12/ArrayList/</url>
    <content><![CDATA[<p>列表集合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable &#123;  </span><br><span class="line">    // 序列化id  </span><br><span class="line">    private static final long serialVersionUID = 8683452581122892189L;  </span><br><span class="line">    // 默认初始的容量  </span><br><span class="line">    private static final int DEFAULT_CAPACITY = 10;  </span><br><span class="line">    // 一个空对象（为什么是new Object[0]呢？）</span><br><span class="line">    //用Object[0]来代替null 很多时候我们需要传递参数的类型，而不是传null，所以用Object[0]</span><br><span class="line">    private static final Object[] EMPTY_ELEMENTDATA = new Object[0];  </span><br><span class="line">    // 一个空对象，如果使用默认构造函数创建，则默认对象内容默认是该值  </span><br><span class="line">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = new Object[0];  </span><br><span class="line">    // 当前数据对象存放地方，当前对象不参与序列化(主要是关键字transient起作用的)  </span><br><span class="line">    transient Object[] elementData;  </span><br><span class="line">    // 当前数组长度  </span><br><span class="line">    private int size;  </span><br><span class="line">    // 数组最大长度  </span><br><span class="line">    private static final int MAX_ARRAY_SIZE = 2147483639;  </span><br><span class="line"></span><br><span class="line">    // 省略方法。。  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认object[] xxx = {}||new object[0]</p>
<p>这里规定了一个默认空对象的构造法方法 ：</p>
<p>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = new Object[0];  </p>
<p>还有一个有参数的构造法 private static final Object[] EMPTY_ELEMENTDATA = new Object[0]; </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">        ensureCapacityInternal(size + 1);  //确认内部容量</span><br><span class="line">        前面定义默认的size为0 所以每次添加新的值 size会加一</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">        // 如果elementData 指向的是 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 的地址</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            //置默认大小 为DEFAULT_CAPACITY</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line"></span><br><span class="line">            DEFAULT_CAPACITY == 10 前面定义为10 minCapacity 是size+1进来的</span><br><span class="line">        	这里为何要加一的原因是数组的length有长度的话就是1 而下标是为0</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        //确定实际容量</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        // 如果超出了容量，进行扩展</span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; 0)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">        // overflow-conscious code</span><br><span class="line">        int oldCapacity = elementData.length;</span><br><span class="line">        //右移运算符等价于除以2</span><br><span class="line">        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; 0)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        // minCapacity is usually close to size, so this is a win:</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上述代码块比较长，这里做个简单的总结：<br>1、add（E e）：添加元素，首先会判断 elementData 数组的长度，然后设置值<br>2、ensureCapacityInternal（int minCapacity）：判断 element 是否为空，如果是，则设置默认数组长度<br>3、ensureExplicitCapacity（int minCapacity）：判断预期增长数组长度是否超过当前容量，如果过超过，则调用grow（）<br>4、grow(int minCapacity)：对数组进行扩展，默认的长度为10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    //确定容量</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;//将下标赋值</span><br><span class="line">    size++;//长度加一</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public ArrayList(int initialCapacity) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; 0) &#123;  </span><br><span class="line">        this.elementData = new Object[initialCapacity];  </span><br><span class="line">        //设置容量</span><br><span class="line">        如果值为0的时候 将赋值EMPTY_ELEMENTDATA &#123;0&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == 0) &#123;  </span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA; </span><br><span class="line">        //EMPTY_ELEMENTDATA</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+  </span><br><span class="line">                                           initialCapacity);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayList（）：指向 DEFAULTCAPACITY_EMPTY_ELEMENTDATA，当列表使用的时候，才会进行初始化，会通过判断是不是 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 这个对象而设置数组默认大小。<br>ArrayList(int initialCapacity)：当 initialCapacity &gt;0 的时候，设置该长度。如果 initialCapacity =0，则指向 EMPTY_ELEMENTDATA 在使用的时候，并不会设置默认数组长度 。</p>
<p>因此 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 与 EMPTY_ELEMENTDATA 的本质区别就在于，会不会设置默认的数组长度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@HotSpotIntrinsicCandidate</span><br><span class="line">public static void (Object src,</span><br><span class="line">                             int srcPos,</span><br><span class="line">                             Object dest,</span><br><span class="line">                             int destPos,</span><br><span class="line">                             int length)</span><br><span class="line">src:源数组；     srcPos:源数组要复制的起始位置；</span><br><span class="line">dest:目的数组；  destPos:目的数组放置的起始位置；    length:复制的长度。</span><br><span class="line">注意：src and dest都必须是同类型或者可以进行转换类型的数组．</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">        rangeCheck(index); // 判断索引是否有效</span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);  // 获取对应数据</span><br><span class="line">        int numMoved = size - index - 1;  // 判断删除数据位置</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; 0) //如果删除数据不是最后一位，则需要移动数组</span><br><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = null; // 让指针最后指向空，进行垃圾回收</span><br><span class="line">        <span class="built_in">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>System.arraycopy(elementData, index+1, elementData, index,numMoved);<br>将原本的数组 下标加一复制到当前的下标的地方 </p>
<p>numMoved至于长度 == size(该数组的长度) - 下标 - 1 = 复制后面的长度（这里并不会影响到数组的容量）</p>
<p>elementData[–size] = null;将数组的size长度减一的坐标为null</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int index = 0; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == null) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (int index = 0; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这种方式，会在内部进行 AccessRandom 方式遍历数组，当匹配到数据跟 Object 相等，则调用 fastRemove（） 进行删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       int numMoved = size - index - 1;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; 0)</span><br><span class="line">           System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--size] = null; // clear to <span class="built_in">let</span> GC <span class="keyword">do</span> its work</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>fastRemove( ): fastRemove 操作与上述的根据下标进行删除其实是一致的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span><br><span class="line">       //获取数组指针</span><br><span class="line">       final Object[] elementData = this.elementData;</span><br><span class="line">       int r = 0, w = 0;</span><br><span class="line">       r为控制循环 w为交集多少个交集</span><br><span class="line">       boolean modified = <span class="literal">false</span>;</span><br><span class="line">       try &#123;</span><br><span class="line">           <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">               //根据 complement 进行判断是否一致 </span><br><span class="line">               <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                   elementData[w++] = elementData[r];</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           // 进行数据整理</span><br><span class="line">           <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">               System.arraycopy(elementData, r,</span><br><span class="line">                                elementData, w,</span><br><span class="line">                                size - r);</span><br><span class="line">               w += size - r;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">               // clear to <span class="built_in">let</span> GC <span class="keyword">do</span> its work</span><br><span class="line">               <span class="keyword">for</span> (int i = w; i &lt; size; i++)</span><br><span class="line">                   elementData[i] = null;</span><br><span class="line">               modCount += size - w;</span><br><span class="line">               size = w;</span><br><span class="line">               modified = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">return</span> modified;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public E <span class="built_in">set</span>(int index, E e) &#123;</span><br><span class="line">        rangeCheck(index);//判断是否有校index</span><br><span class="line">        checkForComodification();</span><br><span class="line">        //旧值</span><br><span class="line">        E oldValue = ArrayList.this.elementData(offset + index);</span><br><span class="line">        //赋新值</span><br><span class="line">        ArrayList.this.elementData[offset + index] = e;</span><br><span class="line">        //返回旧值</span><br><span class="line">        <span class="built_in">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">		//索引为null的值</span><br><span class="line">        <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int i = 0; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==null)</span><br><span class="line">                    <span class="built_in">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        //找出一样的值</span><br><span class="line">            <span class="keyword">for</span> (int i = 0; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="built_in">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        //找不到为null</span><br><span class="line">        <span class="built_in">return</span> -1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>//判断索引的值会不会大于数组的长度<br>public E get(int index) {<br>        rangeCheck(index);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2020/05/30/Batis/</url>
    <content><![CDATA[<h2 id="resultmap的细节问题"><a href="#resultmap的细节问题" class="headerlink" title="resultmap的细节问题"></a>resultmap的细节问题</h2><p>表的id不能冲突到。<br>property 是java的初始变量<br>column 要与数据库的值一一对应</p>
<p>（1）mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值。</p>
<p>（2）mybatis在处理${}时，就是把${}替换成变量的值。</p>
<p>（3）使用#{}可以有效的防止SQL注入，提高系统安全性。原因在于：预编译机制。预编译完成之后，SQL的结构已经固定，即便用户输入非法参数，也不会对SQL的结构产生影响，从而避免了潜在的安全风险</p>
<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"com.liulanghan.Blog"</span> id=<span class="string">"BlogResult"</span>&gt;    </span><br><span class="line">    &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;    </span><br><span class="line">    &lt;result column=<span class="string">"title"</span> property=<span class="string">"title"</span>/&gt;    </span><br><span class="line">    &lt;result column=<span class="string">"content"</span> property=<span class="string">"content"</span>/&gt;    </span><br><span class="line">    &lt;result column=<span class="string">"owner"</span> property=<span class="string">"owner"</span>/&gt;    </span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"selectBlog"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"BlogResult"</span>&gt;    </span><br><span class="line">      select * from t_blog <span class="built_in">where</span> id = <span class="comment">#&#123;id&#125;    </span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"BookCategroy"</span> id=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	&lt;id property=<span class="string">"typeid"</span> column=<span class="string">"type_id"</span>&gt;&lt;/id&gt;</span><br><span class="line">	&lt;result property=<span class="string">"booktype"</span> column=<span class="string">"book_type"</span>/&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;collection property=<span class="string">"books"</span> ofType=<span class="string">"Book"</span>&gt;</span><br><span class="line">		&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">		&lt;result property=<span class="string">"book_name"</span> column=<span class="string">"book_name"</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">"press"</span> column=<span class="string">"press"</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">"price"</span> column=<span class="string">"price"</span>/&gt;</span><br><span class="line">	&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"bookmessage"</span> resultMap=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	SELECT bc.*,b.* FROM book_categroy </span><br><span class="line">	AS bc inner JOIN book AS b</span><br><span class="line">	ON  bc.type_id = b.book_type</span><br><span class="line">	<span class="built_in">where</span> bc.type_id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>oftype 是实体类的集合 list<Book><br>id 必须一对一对应<br>一对多的话就用<collection></collection></Book></p>
<h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"book"</span> id=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">	&lt;result property=<span class="string">"book_name"</span> column=<span class="string">"book_name"</span>/&gt;</span><br><span class="line">	&lt;result property=<span class="string">"press"</span> column=<span class="string">"press"</span>/&gt;</span><br><span class="line">	&lt;result property=<span class="string">"price"</span> column=<span class="string">"price"</span>/&gt;</span><br><span class="line">	&lt;association property=<span class="string">"bookcategroy"</span> javaType=<span class="string">"BookCategroy"</span>&gt;</span><br><span class="line">		&lt;id property=<span class="string">"typeid"</span> column=<span class="string">"type_id"</span>&gt;&lt;/id&gt;</span><br><span class="line">		&lt;result property=<span class="string">"booktype"</span> column=<span class="string">"book_type"</span>/&gt;</span><br><span class="line">	&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"bookmessage"</span> resultMap=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	SELECT bc.*,b.* FROM book_categroy </span><br><span class="line">	AS b inner JOIN book_categroy  AS bc</span><br><span class="line">	ON  b.book_type = bc.type_id</span><br><span class="line">	<span class="built_in">where</span> b.id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>多对一就用<association></association></p>
<h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a><where>动态sql</where></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">where</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"id!=null"</span>&gt;and \<span class="comment">#&#123;id&#125;,&lt;/if&gt;</span></span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"name!=null"</span>&gt;and \<span class="comment">#&#123;name&#125;,&lt;/if&gt;</span></span><br><span class="line">&lt;/<span class="built_in">where</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以去除结尾的，和多余的and</p>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a><set>sql</set></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update order </span><br><span class="line">&lt;<span class="built_in">set</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"id!=null"</span>&gt;id = \<span class="comment">#&#123;id&#125;,&lt;/if&gt;</span></span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"name!=null"</span>&gt;name = \<span class="comment">#&#123;name&#125;&lt;/if&gt;</span></span><br><span class="line">&lt;/<span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure>
<p>去掉多余的,</p>
<h3 id="sql-1"><a href="#sql-1" class="headerlink" title="sql"></a><trim>sql</trim></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"InsertStudent"</span> parameterType=<span class="string">"Student"</span>&gt;</span><br><span class="line"></span><br><span class="line">Insert into stud_info </span><br><span class="line"></span><br><span class="line">&lt;trim prefix=<span class="string">"("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'id!=null'</span>&gt;id,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'sname!=null'</span>&gt;sname,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'birthday!=null'</span>&gt;birthday,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'gender!=null'</span>&gt;gender,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'telcode!=null'</span>&gt;telcode,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'mark!=null'</span>&gt;mark&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/trim&gt;</span><br><span class="line"></span><br><span class="line">&lt;trim prefix=<span class="string">"values("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'id!=null'</span>&gt;<span class="comment">#&#123;id&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'sname!=null'</span>&gt;<span class="comment">#&#123;sname&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'birthday!=null'</span>&gt;<span class="comment">#&#123;birthday&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'gender!=null'</span>&gt;<span class="comment">#&#123;gender&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'telcode!=null'</span>&gt;<span class="comment">#&#123;telcode&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'mark!=null'</span>&gt;<span class="comment">#&#123;mark&#125;&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/trim&gt;</span><br><span class="line"></span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<p>prefix为前缀 suffix为后缀 suffixOverrides结尾去除，</p>
<h3 id="注解形式"><a href="#注解形式" class="headerlink" title="注解形式"></a>注解形式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Select(<span class="string">"&lt;script&gt;\r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"select * from book \r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;where&gt;\r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;if test=\"name!=null\"&gt;book_name = #&#123;name&#125;&lt;/if&gt;\r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;/where&gt;&lt;/script&gt;\r\n"</span>)</span><br><span class="line"></span><br><span class="line">public Book selectbookmessage(String name);</span><br></pre></td></tr></table></figure>
<p>如果是动态标签那么要加上<script></script></p>
<h3 id="sql-2"><a href="#sql-2" class="headerlink" title="sql"></a><foreach>sql</foreach></h3><p>item：集合中元素迭代时的别名，该参数为必选。<br>index：在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选<br>open：foreach代码的开始符号，一般是(和close=”)”合用。常用在in(),values()时。该参数可选<br>separator：元素之间的分隔符，例如在in()的时候，separator=”,”会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。<br>close: foreach代码的关闭符号，一般是)和open=”(“合用。常用在in(),values()时。该参数可选。<br>collection: 要做foreach的对象，作为入参时，List对象默认用”list”代替作为键，数组对象有”array”代替作为键，Map对象没有默认的键。当然在作为入参时可以使用@Param(“keyName”)来设置键，设置keyName后，list,array将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：如果User有属性List ids。入参是User对象，那么这个collection = “ids”.如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = “ids.id”</p>
<p>list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"countByUserList"</span> resultType=<span class="string">"_int"</span> parameterType=<span class="string">"list"</span>&gt;</span><br><span class="line">select count(*) from users</span><br><span class="line">  &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">    id <span class="keyword">in</span></span><br><span class="line">    &lt;foreach item=<span class="string">"item"</span> collection=<span class="string">"list"</span> separator=<span class="string">","</span> open=<span class="string">"("</span> close=<span class="string">")"</span> index=<span class="string">""</span>&gt;</span><br><span class="line">      <span class="comment">#&#123;item.id, jdbcType=NUMERIC&#125;</span></span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">  &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"dynamicForeach2Test"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">     select * from t_blog <span class="built_in">where</span> id <span class="keyword">in</span></span><br><span class="line">     &lt;foreach collection=<span class="string">"array"</span> index=<span class="string">"index"</span> item=<span class="string">"item"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">          <span class="comment">#&#123;item&#125;</span></span><br><span class="line">     &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"> public void <span class="function"><span class="title">dynamicForeach2Test</span></span>() &#123;</span><br><span class="line">     SqlSession session = Util.getSqlSessionFactory().openSession();</span><br><span class="line">     BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">     int[] ids = new int[] &#123;1,3,6,9&#125;;</span><br><span class="line">     List blogs = blogMapper.dynamicForeach2Test(ids);</span><br><span class="line">     <span class="keyword">for</span> (Blog blog : blogs)</span><br><span class="line">     System.out.println(blog);</span><br><span class="line">     session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>map</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testInserts</span></span>()&#123;</span><br><span class="line">    Map&lt;String,List&lt;Object&gt;&gt; param = new HashMap&lt;String,List&lt;Object&gt;&gt;();</span><br><span class="line">    List&lt;Object&gt; l = new ArrayList&lt;Object&gt;();</span><br><span class="line">    User u1 = new User();</span><br><span class="line">    u1.setUserName(<span class="string">"u1_name"</span>);</span><br><span class="line">    u1.setPassword(<span class="string">"11111"</span>);</span><br><span class="line">    u1.setName(<span class="string">"u1"</span>);</span><br><span class="line">    u1.setSex(1);</span><br><span class="line">    u1.setAge(20);</span><br><span class="line">    u1.setCreated(new Date());</span><br><span class="line">    u1.setBirthday(new Date());</span><br><span class="line">    u1.setUpdated(new Date());</span><br><span class="line">    User u2 = new User();</span><br><span class="line">    u2.setUserName(<span class="string">"u2_name"</span>);</span><br><span class="line">    u2.setPassword(<span class="string">"11111"</span>);</span><br><span class="line">    u2.setName(<span class="string">"u2"</span>);</span><br><span class="line">    u2.setSex(1);</span><br><span class="line">    u2.setAge(20);</span><br><span class="line">    u2.setCreated(new Date());</span><br><span class="line">    u2.setBirthday(new Date());</span><br><span class="line">    u2.setUpdated(new Date());</span><br><span class="line">    l.add(u1);</span><br><span class="line">    l.add(u2);</span><br><span class="line">    param.put(<span class="string">"keys"</span>, l);</span><br><span class="line">    int count = this.userMapper.insertUsers(param);</span><br><span class="line">    System.out.println(<span class="string">"..............."</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">//如果使用@param(<span class="string">"xxx"</span>)注解的话，foreach集合中的colleciton的值可以是<span class="string">"xxx.keys"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;insert id=<span class="string">"insertUsers"</span>&gt;</span><br><span class="line">   insert into tb_user</span><br><span class="line">   ( id, user_name, password,sex,</span><br><span class="line">     name, age, birthday, created, updated)</span><br><span class="line">   values</span><br><span class="line">   &lt;foreach collection=<span class="string">"keys"</span> item=<span class="string">"value"</span>  separator=<span class="string">","</span>&gt;</span><br><span class="line">      (null,<span class="comment">#&#123;value.userName&#125;,#&#123;value.password&#125;,#&#123;value.sex&#125;,#&#123;value.name&#125;,#&#123;value.age&#125;,#&#123;value.birthday&#125;,#&#123;value.created&#125;,#&#123;value.updated&#125;)</span></span><br><span class="line">   &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<h3 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package org.Dao.processor;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line">import org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class SexTypeHandler extends BaseTypeHandler&lt;String&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (parameter.equals(<span class="string">"男"</span>)) &#123;</span><br><span class="line">            ps.setString(i,<span class="string">"1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ps.setString(i,<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">        <span class="built_in">return</span> rs.getString(columnName).equals(<span class="string">"1"</span>)?<span class="string">"男"</span>:<span class="string">"女"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">        <span class="built_in">return</span> rs.getString(columnIndex).equals(<span class="string">"1"</span>)?<span class="string">"男"</span>:<span class="string">"女"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">        <span class="built_in">return</span> cs.getString(columnIndex).equals(<span class="string">"1"</span>)?<span class="string">"男"</span>:<span class="string">"女"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conf.xml配置</span><br><span class="line">&lt;!-- 创建处理器--&gt;</span><br><span class="line">    &lt;typeHandlers&gt;</span><br><span class="line">        &lt;typeHandler handler=<span class="string">"org.Dao.processor.StringTypeHandler"</span> javaType=<span class="string">"String"</span> jdbcType=<span class="string">"VARCHAR"</span>/&gt;</span><br><span class="line">        &lt;typeHandler handler=<span class="string">"org.Dao.processor.SexTypeHandler"</span> javaType=<span class="string">"String"</span> jdbcType=<span class="string">"VARCHAR"</span>/&gt;</span><br><span class="line">        &lt;typeHandler handler=<span class="string">"org.Dao.processor.validTypeHandle"</span> /&gt;</span><br><span class="line">    &lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure>

<h3 id="自动生成mapper"><a href="#自动生成mapper" class="headerlink" title="自动生成mapper"></a>自动生成mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--这里是配置generatorConfig.xml的路径</span></span><br><span class="line"><span class="comment">                      不写默认在resources目录下找generatorConfig.xml文件</span></span><br><span class="line"><span class="comment">                       --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在resource下新建一个generatorConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定数据库连接驱动</span></span><br><span class="line"><span class="comment">    &lt;classPathEntry</span></span><br><span class="line"><span class="comment">            location="mysql-connector-Java-5.1.6.jar的位置" /&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  connectionURL="jdbc:mysql://127.0.0.1:3306/springmvc_mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useNewIO=true" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"myContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个数据库一个context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/jinshuju?serverTimezone=UTC"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:生成po类位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.yefeng.jpa.po"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.yefeng.jpa.mapper"</span>  <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--targetPackage:mapper接口生成的位置  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.yeefeng.jpa.mapper"</span>  <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 制定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">""</span> <span class="attr">tableName</span>=<span class="string">"question"</span> <span class="attr">domainObjectName</span>=<span class="string">"Question"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后点击idea插件mybaits-generator</p>
]]></content>
  </entry>
  <entry>
    <title>Date类</title>
    <url>/2020/03/06/Date%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="java-Date类"><a href="#java-Date类" class="headerlink" title="java Date类"></a>java Date类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Date date = new Date();日期类</span><br><span class="line">system.out.println(<span class="string">"没有格式化时间"</span>+date);</span><br><span class="line">SimpleDateFormat format = new SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">这里格式化了时间 String str = format.format(date);</span><br></pre></td></tr></table></figure>
<h3 id="插入数据库时的时间"><a href="#插入数据库时的时间" class="headerlink" title="插入数据库时的时间"></a>插入数据库时的时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Timestamp timePara = new Timestamp(new Date().getTime());这个date的子类</span><br><span class="line"></span><br><span class="line">Date date ;</span><br><span class="line">所以设置的时候可以将这个类设置为date的属性,不会丢失时间数</span><br></pre></td></tr></table></figure>

<h3 id="注解形式的插入时间"><a href="#注解形式的插入时间" class="headerlink" title="注解形式的插入时间"></a>注解形式的插入时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@DateTimeFormat(pattern=<span class="string">"yyyy-MM-dd"</span>)//页面写入数据库时格式化</span><br><span class="line">Date datetime;</span><br><span class="line">这个是前端插入数据库</span><br><span class="line"></span><br><span class="line">这个是后端给前端响应 但是它只能实现@Responsebody</span><br><span class="line">@JsonFormat(pattern = <span class="string">"yyyy-MM-dd"</span>,timezone=<span class="string">"GMT+8"</span>)</span><br><span class="line">可以自动格式化时间</span><br></pre></td></tr></table></figure>

<h3 id="用Thymeleaf插入时间"><a href="#用Thymeleaf插入时间" class="headerlink" title="用Thymeleaf插入时间"></a>用Thymeleaf插入时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如果引用的是对象 那么 date.getDate()</span><br><span class="line"><span class="string">"#dates.format(date,'dd/MMM/yyyy HH:mm')"</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>LineList</title>
    <url>/2020/05/12/LinkedList/</url>
    <content><![CDATA[<h3 id="关于链表集合"><a href="#关于链表集合" class="headerlink" title="关于链表集合"></a>关于链表集合</h3><pre><code>它有链表头和尾
插入快 查询慢 性能不安全</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package org.entity;</span><br><span class="line">//定义一个链表结构</span><br><span class="line">public class Node &#123;</span><br><span class="line">	public Object obj;</span><br><span class="line">	</span><br><span class="line">	public Node prev;</span><br><span class="line">	</span><br><span class="line">	public Node next;</span><br><span class="line">	</span><br><span class="line">	public <span class="function"><span class="title">Node</span></span>() &#123;</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Node(Object obj, Node prev, Node next) &#123;</span><br><span class="line">		this.obj = obj;</span><br><span class="line">		this.prev = prev;</span><br><span class="line">		this.next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class text02 &#123;</span><br><span class="line">	</span><br><span class="line">	private Node first;</span><br><span class="line">	</span><br><span class="line">	private Node last;</span><br><span class="line">	</span><br><span class="line">	private int size;</span><br><span class="line"></span><br><span class="line">	public void add(Object obj) &#123;</span><br><span class="line">		Node node = new Node();</span><br><span class="line">		<span class="keyword">if</span>(first==null) &#123;</span><br><span class="line">			node.next = null;</span><br><span class="line">			node.prev = null;</span><br><span class="line">			node.obj = obj;</span><br><span class="line">			first = node;</span><br><span class="line">			last = node;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			node.prev = last;</span><br><span class="line">			node.next = null;</span><br><span class="line">			node.obj = obj;</span><br><span class="line">			last.next = node;</span><br><span class="line">			last = node;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		text02 t = new text02();</span><br><span class="line">		t.add(2);</span><br><span class="line">		t.add(3);</span><br><span class="line">		t.add(4);</span><br><span class="line">		System.out.println(t.last);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加节点的过程"><a href="#添加节点的过程" class="headerlink" title="添加节点的过程"></a>添加节点的过程</h3><p>首先加入第一个节点时 node first就是它自身 last也是它自身 它的上一个节点和下一个节点为null</p>
<p>当我们链表已经有节点时 再加入节点的时候 </p>
<p>当前的node.prev上一个节点 = last<br>当前的node.next下一个节点 = null<br>node.obj = obj 就是它本身的节点</p>
<p>接着</p>
<p>last是之前的node 也就是说上一个节点的地址，<br>这样我们就可以改变last.next = node 这样就变成了我们加入进来的node对象（因为上一个节点有next 和 prev）<br>再把last = node 这样就变成了我们下次进来的上一个节点为现在的节点<br>依此类推 就不断延续</p>
<h3 id="空构造法"><a href="#空构造法" class="headerlink" title="空构造法"></a>空构造法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public <span class="function"><span class="title">LinkedList</span></span>() &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="有参构造法"><a href="#有参构造法" class="headerlink" title="有参构造法"></a>有参构造法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> public LinkedList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">         this();</span><br><span class="line">         // 将集合添加到链表中去</span><br><span class="line">         addAll(c);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">         // 从链表尾巴开始集合中元素</span><br><span class="line">         <span class="built_in">return</span> addAll(size, c);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">     // 1.添加位置的下标的合理性检查</span><br><span class="line">     checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">     // 2.将集合转换为Object[]数组对象</span><br><span class="line">     Object[] a = c.toArray();</span><br><span class="line">     int numNew = a.length;</span><br><span class="line">     <span class="keyword">if</span> (numNew == 0)</span><br><span class="line">         <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">     // 3.得到插入位置的前继节点和后继节点</span><br><span class="line">     Node&lt;E&gt; pred, succ;</span><br><span class="line">     <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">         // 从尾部添加的情况：前继节点是原来的last节点；后继节点是null</span><br><span class="line">         succ = null;</span><br><span class="line">         pred = last;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 从指定位置（非尾部）添加的情况:前继节点就是index位置的节点，后继节点是index位置的节点的前一个节点</span><br><span class="line">         succ = node(index);</span><br><span class="line">         pred = succ.prev;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     // 4.遍历数据，将数据插入</span><br><span class="line">     <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">         @SuppressWarnings(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">         // 创建节点</span><br><span class="line">         Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</span><br><span class="line">         <span class="keyword">if</span> (pred == null)</span><br><span class="line">             // 空链表插入情况：</span><br><span class="line">             first = newNode;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             // 非空链表插入情况：</span><br><span class="line">             pred.next = newNode;</span><br><span class="line">         // 更新前置节点为最新插入的节点（的地址）</span><br><span class="line">         pred = newNode;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (succ == null) &#123;</span><br><span class="line">         // 如果是从尾部开始插入的，则把last置为最后一个插入的元素</span><br><span class="line">         last = pred;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         // 如果不是从尾部插入的，则把尾部的数据和之前的节点连起来</span><br><span class="line">         pred.next = succ;</span><br><span class="line">         succ.prev = pred;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     size += numNew;  // 链表大小+num</span><br><span class="line">     modCount++;  // 修改次数加1</span><br><span class="line">     <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h3 id="add-E-e-方法"><a href="#add-E-e-方法" class="headerlink" title="add(E e)方法"></a>add(E e)方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 作用：将元素添加到链表尾部</span><br><span class="line">   public boolean add(E e) &#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   void linkLast(E e) &#123;</span><br><span class="line">       final Node&lt;E&gt; l = last;  // 获取尾部元素</span><br><span class="line">       final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); // 以尾部元素为前继节点创建一个新节点</span><br><span class="line">       last = newNode;  // 更新尾部节点为需要插入的节点</span><br><span class="line">       <span class="keyword">if</span> (l == null)</span><br><span class="line">	    // 如果空链表的情况：同时更新first节点也为需要插入的节点。（也就是说：该节点既是头节点first也是尾节点last）</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        // 不是空链表的情况：将原来的尾部节点（现在是倒数第二个节点）的next指向需要插入的节点</span><br><span class="line">           l.next = newNode;</span><br><span class="line">       size++; // 更新链表大小和修改次数，插入完毕</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="add-int-index-E-element-方法"><a href="#add-int-index-E-element-方法" class="headerlink" title="add(int index, E element)方法"></a>add(int index, E element)方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 作用：在指定位置添加元素</span><br><span class="line">   public void add(int index, E element) &#123;</span><br><span class="line">    // 检查插入位置的索引的合理性</span><br><span class="line">       checkPositionIndex(index);</span><br><span class="line">       //添加到尾部</span><br><span class="line">       <span class="keyword">if</span> (index == size)</span><br><span class="line">        // 插入的情况是尾部插入的情况：调用linkLast（）解释如上。</span><br><span class="line">           linkLast(element);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        // 中间插入）：linkBefore（）见下面。</span><br><span class="line">           linkBefore(element, node(index));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private void checkPositionIndex(int index) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">           throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">   &#125;</span><br><span class="line">   //判断index是否正确参数</span><br><span class="line">   private boolean isPositionIndex(int index) &#123;</span><br><span class="line">       <span class="built_in">return</span> index &gt;= 0 &amp;&amp; index &lt;= size;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">       // assert succ != null;</span><br><span class="line">       final Node&lt;E&gt; pred = succ.prev;  //获取到输入下标的node上个节点是</span><br><span class="line">       final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);  // pred设置为新元素的上一个节点 老的succ为下一个节点</span><br><span class="line">       succ.prev = newNode;  // 将succ的上一个节点设置为新的节点</span><br><span class="line">       <span class="keyword">if</span> (pred == null)</span><br><span class="line">        // 如果pred为null，说明该节点插入在头节点之前，要重置first头节点 </span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        // 如果pred不为null，</span><br><span class="line">           pred.next = newNode;pred的下个节点等于新的节点对象</span><br><span class="line">       size++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="get-int-index-方法"><a href="#get-int-index-方法" class="headerlink" title="get(int index)方法"></a>get(int index)方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   public E get(int index) &#123;</span><br><span class="line">    // 元素下表的合理性检查</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       // node(index)真正查询匹配元素并返回</span><br><span class="line">       <span class="built_in">return</span> node(index).item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">// 作用：查询指定位置元素并返回</span><br><span class="line">   Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">       // assert isElementIndex(index);</span><br><span class="line"></span><br><span class="line">	// 如果索引位置靠链表前半部分，从头开始遍历</span><br><span class="line">       <span class="keyword">if</span> (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class="line">           Node&lt;E&gt; x = first;</span><br><span class="line">           <span class="keyword">for</span> (int i = 0; i &lt; index; i++)</span><br><span class="line">               x = x.next;</span><br><span class="line">           <span class="built_in">return</span> x;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       // 如果索引位置靠链表后半部分，从尾开始遍历</span><br><span class="line">           Node&lt;E&gt; x = last;</span><br><span class="line">           <span class="keyword">for</span> (int i = size - 1; i &gt; index; i--)</span><br><span class="line">               x = x.prev;</span><br><span class="line">           <span class="built_in">return</span> x;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="remove-int-index-方法"><a href="#remove-int-index-方法" class="headerlink" title="remove(int index)方法"></a>remove(int index)方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 作用：移除指定位置的元素</span><br><span class="line">   public E remove(int index) &#123;</span><br><span class="line">    // 移除元素索引的合理性检查</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       // 将节点删除</span><br><span class="line">       <span class="built_in">return</span> unlink(node(index));</span><br><span class="line">   &#125;</span><br><span class="line"> E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">        // assert x != null;</span><br><span class="line">        final E element = x.item;  // 得到指定节点的值</span><br><span class="line">        final Node&lt;E&gt; next = x.next; // 得到指定节点的后继节点</span><br><span class="line">        final Node&lt;E&gt; prev = x.prev; // 得到指定节点的前继节点</span><br><span class="line"></span><br><span class="line">		// 如果prev为null表示删除是头节点，否则就不是头节点</span><br><span class="line">        <span class="keyword">if</span> (prev == null) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;2 3 4 去除掉3 2的下一个节点4</span><br><span class="line">            x.prev = null; // 置空需删除的指定节点的前置节点（null）</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		// 如果next为null,则表示删除的是尾部节点，否则就不是尾部节点</span><br><span class="line">        <span class="keyword">if</span> (next == null) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;2 3 4 去除掉3 4的上一个节点2</span><br><span class="line">            x.next = null; //  置空需删除的指定节点的后置节点</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		// 置空需删除的指定节点的值</span><br><span class="line">        x.item = null;</span><br><span class="line">        size--; // 数量减1</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="built_in">return</span> element;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="clear-方法"><a href="#clear-方法" class="headerlink" title="clear()方法"></a>clear()方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 清空链表</span><br><span class="line">   public void <span class="function"><span class="title">clear</span></span>() &#123;</span><br><span class="line">       // Clearing all of the links between nodes is <span class="string">"unnecessary"</span>, but:</span><br><span class="line">       // - helps a generational GC <span class="keyword">if</span> the discarded nodes inhabit</span><br><span class="line">       //   more than one generation</span><br><span class="line">       // - is sure to free memory even <span class="keyword">if</span> there is a reachable Iterator</span><br><span class="line">    // 进行<span class="keyword">for</span>循环，进行逐条置空；直到最后一个元素</span><br><span class="line">       <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != null; ) &#123;</span><br><span class="line">           Node&lt;E&gt; next = x.next;</span><br><span class="line">           x.item = null;</span><br><span class="line">           x.next = null;</span><br><span class="line">           x.prev = null;</span><br><span class="line">           x = next;</span><br><span class="line">       &#125;</span><br><span class="line">       // 置空头和尾为null</span><br><span class="line">       first = last = null;</span><br><span class="line">       size = 0;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="indexOf-Object-o"><a href="#indexOf-Object-o" class="headerlink" title="indexOf(Object o)"></a>indexOf(Object o)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 返回元素在链表中的索引，如果不存在则返回-1</span><br><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">      int index = 0;</span><br><span class="line">      // 如果元素为null，进行如下循环判断</span><br><span class="line">      <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">          <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class="line">              <span class="keyword">if</span> (x.item == null)</span><br><span class="line">                  <span class="built_in">return</span> index;</span><br><span class="line">              index++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      // 元素不为null.进行如下循环判断</span><br><span class="line">          <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class="line">              <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                  <span class="built_in">return</span> index;</span><br><span class="line">              index++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> -1;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="addFirst-E-e-方法"><a href="#addFirst-E-e-方法" class="headerlink" title="addFirst(E e)方法"></a>addFirst(E e)方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> // 作用：在链表头插入指定元素</span><br><span class="line"> public void addFirst(E e) &#123;</span><br><span class="line">      linkFirst(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private void linkFirst(E e) &#123;</span><br><span class="line">      final Node&lt;E&gt; f = first; // 获取头部元素</span><br><span class="line">      final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f); // 创建新的头部元素（原来的头部元素变成了第二个）</span><br><span class="line">      first = newNode;</span><br><span class="line"></span><br><span class="line">// 链表头部为空，（也就是链表为空）</span><br><span class="line">      <span class="keyword">if</span> (f == null)</span><br><span class="line">          last = newNode; // 头尾元素都是e</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          f.prev = newNode;  // 否则就更新原来的头元素的prev为新元素的地址引用</span><br><span class="line">      size++;</span><br><span class="line">      modCount++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="addLast-E-e-方法"><a href="#addLast-E-e-方法" class="headerlink" title="addLast(E e)方法"></a>addLast(E e)方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 作用：在链表尾部添加元素e</span><br><span class="line">  public void addLast(E e) &#123;</span><br><span class="line">	// 上面已讲解过，参考上面。add()方法</span><br><span class="line">       linkLast(e);</span><br><span class="line">   &#125;</span><br><span class="line">   void linkLast(E e) &#123;</span><br><span class="line">       final Node&lt;E&gt; l = last;  // 获取尾部元素</span><br><span class="line">       final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); // 以尾部元素为前继节点创建一个新节点</span><br><span class="line">       last = newNode;  // 更新尾部节点为需要插入的节点</span><br><span class="line">       <span class="keyword">if</span> (l == null)</span><br><span class="line">	    // 如果空链表的情况：同时更新first节点也为需要插入的节点。（也就是说：该节点既是头节点first也是尾节点last）</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        // 不是空链表的情况：将原来的尾部节点（现在是倒数第二个节点）的next指向需要插入的节点</span><br><span class="line">           l.next = newNode;</span><br><span class="line">       size++; // 更新链表大小和修改次数，插入完毕</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2020/07/26/Map/</url>
    <content><![CDATA[<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>默认初始化容量，必须是2的次方。这个容量就是table的长度<br>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; 左移4位补0</p>
<p>最大的存量<br>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</p>
<p>散列因子<br>static final float DEFAULT_LOAD_FACTOR = 0.75f;</p>
<p>这个是一个链表在多长时转化为红黑树，默认为8<br>static final int TREEIFY_THRESHOLD = 8;</p>
<p>当一颗树的节点少于6个的时候，将这棵树转化为链表<br>static final int UNTREEIFY_THRESHOLD = 6;</p>
<p>树化判断<br>static final int MIN_TREEIFY_CAPACITY = 64;</p>
<p>这个数组会在第一次使用时初始化，并且在条件合适的时候重构，它的长度一定是2的整数次方<br>transient Node&lt;K,V&gt;[] table;</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">初始散列因子</span><br><span class="line">public <span class="function"><span class="title">HashMap</span></span>() &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">自定义数组长度和散列因子</span><br><span class="line">public HashMap(int initialCapacity, <span class="built_in">float</span> loadFactor) &#123;</span><br><span class="line">	数组长度不能小于0</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line"></span><br><span class="line">    数组设置大于MAXIMUM_CAPACITY，就赋为MAXIMUM_CAPACITY</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line"></span><br><span class="line">    散列因子不能小于或等于0 必须为浮点数</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    this.loadFactor = loadFactor;</span><br><span class="line">    this.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为了数值变成n2</span><br><span class="line">static final int tableSizeFor(int <span class="built_in">cap</span>) &#123;16</span><br><span class="line">    int n = <span class="built_in">cap</span> - 1;15</span><br><span class="line">    n |= n &gt;&gt;&gt; 1; 10000 = 1111 | 0111</span><br><span class="line">    n |= n &gt;&gt;&gt; 2; 10100 = 10000 | 00100 </span><br><span class="line">    n |= n &gt;&gt;&gt; 4; 10101 = 10100 | 00001 1+4+16</span><br><span class="line">    n |= n &gt;&gt;&gt; 8; </span><br><span class="line">    n |= n &gt;&gt;&gt; 16;</span><br><span class="line">    <span class="built_in">return</span> (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="存储-putval"><a href="#存储-putval" class="headerlink" title="存储 putval()"></a>存储 putval()</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    <span class="built_in">return</span> putVal(<span class="built_in">hash</span>(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static final int <span class="built_in">hash</span>(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    将hashcode转换为二进制</span><br><span class="line"></span><br><span class="line">    1010 1111 0000 1001 1010 1111 0000 1001</span><br><span class="line">    ^</span><br><span class="line">    0000 0000 0000 0000 1010 1111 0000 0001 进行补位</span><br><span class="line">    得出</span><br><span class="line">    俩边一样为0 不一样取1</span><br><span class="line">    1010 1111 0000 1001 0000 0000 0000 1000</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);这里进行</span><br><span class="line"></span><br><span class="line">    与运算 hashcode &amp; (n-1) 这里要俩边为1 才取一 否之为0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@param <span class="built_in">hash</span> 计算出来key的<span class="built_in">hash</span>值</span><br><span class="line">@param key key的值</span><br><span class="line">@param value value的值</span><br><span class="line">@param onlyIfAbsent 当为<span class="literal">true</span>的时候，如果key对应有值，则不修改这个值</span><br><span class="line">@param evict 当为<span class="literal">false</span>时，表示这个处于创建模式，现在由于afterNodeInsertion中什么都没有，这里没有实际意</span><br><span class="line">evict参数用于LinkedHashMap中的尾部操作</span><br><span class="line"></span><br><span class="line">final V putVal(int <span class="built_in">hash</span>, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                   boolean evict) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; 存储表</span><br><span class="line">        Node&lt;K,V&gt; p; </span><br><span class="line">        int n, i;</span><br><span class="line">        //判断当table为null或者tab的长度为0时，即table尚未初始化，此时通过resize()方法得到初始化的table</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        //当p点为null 在tab【i】存放新节点</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - 1) &amp; <span class="built_in">hash</span>]) == null)</span><br><span class="line">            tab[i] = newNode(<span class="built_in">hash</span>, key, value, null);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            //判断第一个节点的<span class="built_in">hash</span>是否等于<span class="built_in">hash</span> p.key是否等于key，如果<span class="literal">true</span>那么将p赋值给e，为了给下面替换</span><br><span class="line">            <span class="keyword">if</span> (p.hash == <span class="built_in">hash</span> &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p instanceof TreeNode) //判断树化</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, <span class="built_in">hash</span>, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            	//判断散列表</span><br><span class="line">                <span class="keyword">for</span> (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                	//如果等于null 将为末端插入</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == null) &#123;</span><br><span class="line">                        p.next = newNode(<span class="built_in">hash</span>, key, value, null);</span><br><span class="line">                        //插入成功后，要判断是否需要转换为红黑树，因为插入后链表长度加1，而binCount并不包含新节点，所以判断时要将临界阈值减1</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 <span class="keyword">for</span> 1st</span><br><span class="line">                            treeifyBin(tab, <span class="built_in">hash</span>);</span><br><span class="line">                        <span class="built_in">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //在遍历链表的过程中，可能存放的k为相同的 所以这里直接<span class="built_in">break</span>进行覆盖</span><br><span class="line">                    将<span class="built_in">hash</span>的hashcode去判断是否相同 key是否也相同 直接覆盖</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="built_in">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != null) &#123; // existing mapping <span class="keyword">for</span> key</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                //返回已经存在的k 也是覆盖操作</span><br><span class="line">                <span class="built_in">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //增加修改次数</span><br><span class="line">        ++modCount;</span><br><span class="line">        //当HashMap中存在的node节点大于threshold时，hashmap进行扩容</span><br><span class="line">        //散列表长度</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            //扩容</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] <span class="function"><span class="title">resize</span></span>() &#123;</span><br><span class="line">        //默认table为null</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">        int oldThr = threshold;//默认阈值</span><br><span class="line">        int newCap, newThr = 0;</span><br><span class="line">        表大于0进行扩容</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; 0) &#123;</span><br><span class="line">            已经为最大了，无法再扩容了</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="built_in">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            //左移一位 向右补零就为10000==31</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)要大于原本的容量大小</span><br><span class="line">                newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; 0) // 虽然还没有初始化，但是设置过了阈值，将旧的阈值设置为新的容量</span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               // zero initial threshold signifies using defaults</span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY; 默认大小16</span><br><span class="line">            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);12</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == 0) &#123;// 设置过了阈值 </span><br><span class="line">            <span class="built_in">float</span> ft = (<span class="built_in">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="built_in">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (int)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        //赋值阈值返回</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        </span><br><span class="line">        @SuppressWarnings(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        //新建一个容量为32table</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">        //赋值到table</span><br><span class="line">        table = newTab;</span><br><span class="line">        //判断原本table是否为null</span><br><span class="line">        <span class="keyword">if</span> (oldTab != null) &#123;</span><br><span class="line">            //对于老的<span class="built_in">cap</span>长度循环</span><br><span class="line">            <span class="keyword">for</span> (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                //查看老的table里面的数组是否不为null</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                    //赋值为null 让gc更快去回收</span><br><span class="line">                    oldTab[j] = null;</span><br><span class="line">                    //如果它的下一个节点等于空那么直接赋值</span><br><span class="line">                    <span class="keyword">if</span> (e.next == null)</span><br><span class="line">                        //当前的值的<span class="built_in">hash</span> 与上 32-1 算出下标赋值</span><br><span class="line">                        newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                    //红黑树</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e instanceof TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; // preserve order</span><br><span class="line">                        Node&lt;K,V&gt; loHead = null, loTail = null;//低位</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = null, hiTail = null;//高位</span><br><span class="line">                        Node&lt;K,V&gt; next;//暂存值</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            //当前的hashcode == 第五位要么0要么1 1111 与上1111</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == null)//赋值头节点</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;//lohead</span><br><span class="line">                                loTail = e;</span><br><span class="line">                                //lotail存储地址为502 而lohead存储也为502 下次进来的时候它会找到502.next并且赋值 这样一旦赋值就会出现lohead.next也会赋值到</span><br><span class="line">                                    因为是同一个存储地址</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == null)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != null);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (loTail != null) &#123;</span><br><span class="line">                            loTail.next = null;//最后尾部可能有残留 所以置为null</span><br><span class="line">                            newTab[j] = loHead;//放入原先的位置</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != null) &#123;//高位时</span><br><span class="line">                            hiTail.next = null;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;//原先位置+上table长度 将整一个链表放进去</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public boolean remove(Object key, Object value) &#123;</span><br><span class="line">        <span class="built_in">return</span> removeNode(<span class="built_in">hash</span>(key), key, value, <span class="literal">true</span>, <span class="literal">true</span>) != null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">final Node&lt;K,V&gt; removeNode(int <span class="built_in">hash</span>, Object key, Object value,</span><br><span class="line">                               boolean matchValue, boolean movable) &#123;</span><br><span class="line">        //matchValue这个输入为<span class="literal">true</span> 的话需要传入删除的k和value</span><br><span class="line">        Node&lt;K,V&gt;[] tab;//初始化table长度</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        int n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - 1) &amp; <span class="built_in">hash</span>]) != null) &#123;//初始化表是否为null，查看index下标的值是否为null</span><br><span class="line">            Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class="line">            //查看当前table桶p.key和<span class="built_in">hash</span> 是否一直 如果一直的话就直接赋值为node</span><br><span class="line">            <span class="keyword">if</span> (p.hash == <span class="built_in">hash</span> &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            //树化</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != null) &#123;//这里赋值了e 当前桶位的下一个节点</span><br><span class="line">                <span class="keyword">if</span> (p instanceof TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(<span class="built_in">hash</span>, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        //这里判断是否一样p.key和<span class="built_in">hash</span> 一样的话就跳出</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;//赋值为node</span><br><span class="line">                            <span class="built_in">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;//当前赋给p </span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //这里判断的node是否为null matchValue为<span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span> (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != null &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                //树华情况</span><br><span class="line">                <span class="keyword">if</span> (node instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class="line">                //这种是当前桶位相等于 p</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;//将删除的节点的下一个节点赋给当前下标</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;//这种是为单链表替换 将当前桶位的下一个节点赋给 删除节点的上一个节点</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="built_in">return</span> node;//最后返回删除的值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> null;//找不到</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="built_in">return</span> (e = getNode(<span class="built_in">hash</span>(key), key)) == null ? null : e.value;//找不到返回null</span><br><span class="line">&#125;</span><br><span class="line">final Node&lt;K,V&gt; getNode(int <span class="built_in">hash</span>, Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; </span><br><span class="line">        Node&lt;K,V&gt; first, e;</span><br><span class="line">        int n; K k;</span><br><span class="line">        //初始化table 初始化n长度 找到节点的桶位key</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">            (first = tab[(n - 1) &amp; <span class="built_in">hash</span>]) != null) &#123;</span><br><span class="line">            //这种属于刚好一样 key和<span class="built_in">hash</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == <span class="built_in">hash</span> &amp;&amp; // always check first node</span><br><span class="line">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="built_in">return</span> first;</span><br><span class="line">            //这种为链式 判断下一个节点不为null</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != null) &#123;</span><br><span class="line">                //树化</span><br><span class="line">                <span class="keyword">if</span> (first instanceof TreeNode)</span><br><span class="line">                    <span class="built_in">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(<span class="built_in">hash</span>, key);</span><br><span class="line">                //判断e的<span class="built_in">hash</span>和key是否一直，将返回</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="built_in">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> null;//没找到</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public V replace(K key, V value) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    //查出e的桶位值出来，不等于null</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(<span class="built_in">hash</span>(key), key)) != null) &#123;</span><br><span class="line">        V oldValue = e.value;将新的值赋为老的值</span><br><span class="line">        e.value = value;//替换老的值</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">        <span class="built_in">return</span> oldValue;//返回替换的值</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>js和jquery实现页面跳转的几种方式</title>
    <url>/2020/02/13/My-New-Post/</url>
    <content><![CDATA[<h3 id="原有页面条状"><a href="#原有页面条状" class="headerlink" title="原有页面条状"></a>原有页面条状</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">window.location.href=<span class="string">'b.html'</span></span><br></pre></td></tr></table></figure>
<h3 id="返回上一个页面"><a href="#返回上一个页面" class="headerlink" title="返回上一个页面"></a>返回上一个页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">window.history.back(-1)</span><br></pre></td></tr></table></figure>

<h1 id="jquery条状方式"><a href="#jquery条状方式" class="headerlink" title="jquery条状方式"></a>jquery条状方式</h1><h3 id="原有页面条状-1"><a href="#原有页面条状-1" class="headerlink" title="原有页面条状"></a>原有页面条状</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">window.location.href=<span class="string">'b.html'</span></span><br></pre></td></tr></table></figure>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">window.location.replace(<span class="string">"b.html"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="获取当前连接的参数值"><a href="#获取当前连接的参数值" class="headerlink" title="获取当前连接的参数值"></a>获取当前连接的参数值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getRequest</span></span>() &#123;   </span><br><span class="line">   var url = window.location.search; //获取url中<span class="string">"?"</span>符后的字串   </span><br><span class="line">   var theRequest = new Object();   </span><br><span class="line">   <span class="keyword">if</span> (url.indexOf(<span class="string">"?"</span>) != -1) &#123;   </span><br><span class="line">      var str = url.substr(1);   </span><br><span class="line">      strs = str.split(<span class="string">"&amp;"</span>);   </span><br><span class="line">      <span class="keyword">for</span>(var i = 0; i &lt; strs.length; i ++) &#123;   </span><br><span class="line">          //就是这句的问题</span><br><span class="line">         theRequest[strs[i].split(<span class="string">"="</span>)[0]]=decodeURI(strs[i].split(<span class="string">"="</span>)[1]); </span><br><span class="line">         //之前用了unescape()</span><br><span class="line">         //才会出现乱码  </span><br><span class="line">      &#125;   </span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="built_in">return</span> theRequest;   </span><br><span class="line">&#125;</span><br><span class="line">console.log(getRequest().参数值)</span><br><span class="line"></span><br><span class="line">var obj = new new Object(); 同等于 var obj = &#123;&#125; 这也是一个数组对象</span><br><span class="line">(1)strs[i].split(<span class="string">"="</span>)[0] 这块分解出来是name   name[0]= 参数值[1]</span><br><span class="line">(2)decodeURI(strs[i].split(<span class="string">"="</span>)[1]) 这里是转码问题 在href前面会有网络编码问题 这个是参数值</span><br><span class="line">将转码完的(2)给(1)</span><br><span class="line">theRequest[strs[i].split(<span class="string">"="</span>)[0]] 这是一个对象[name]这里是(1)</span><br><span class="line">那么这个对象就会变成&#123;name:<span class="string">"参数值"</span>&#125; 数组对象</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/10/16/Nginx/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//中文官方文档</span><br><span class="line">https://www.nginx.cn/doc/index.html</span><br><span class="line">//开放80端口</span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="反向代理匹配规则"><a href="#反向代理匹配规则" class="headerlink" title="反向代理匹配规则"></a>反向代理匹配规则</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//前端匹配</span><br><span class="line">devServer: &#123;</span><br><span class="line">        /* 自动打开浏览器 */</span><br><span class="line">        // open: <span class="literal">true</span>,</span><br><span class="line">        /* 设置为0.0.0.0则所有的地址均能访问 */</span><br><span class="line">        host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port: 8080,</span><br><span class="line">        https: <span class="literal">false</span>,</span><br><span class="line">        hotOnly: <span class="literal">false</span>,</span><br><span class="line">        /* 使用代理 */</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                /* 目标代理服务器地址 */</span><br><span class="line">                target: <span class="string">'http://localhost:8000/api'</span>,</span><br><span class="line">                /* 允许跨域 */</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite:&#123;</span><br><span class="line">                    <span class="string">'^/api'</span>:<span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">前端axios请求为</span><br><span class="line"></span><br><span class="line">this.<span class="variable">$axios</span>(&#123;</span><br><span class="line">	url:<span class="string">'api/login'</span> == target/login</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">localhost:8080/api/login 请求为后端</span><br><span class="line"></span><br><span class="line">nginx配置为</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   D:/vue-jin/dist/;</span><br><span class="line">	       	index  index.html index.htm;</span><br><span class="line">			<span class="comment">#proxy_pass http://localhost:8000;	        </span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment"># api为前端项目名称，带app的访问路径都是访问前端，故此将请求转到前端工程</span></span><br><span class="line">		location /api &#123; </span><br><span class="line">			proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">			proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">			proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">			proxy_set_header X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">			proxy_pass http://localhost:8000;</span><br><span class="line">		&#125;</span><br><span class="line">		当前端请求了localhost:8080/api/xxxx请求的时候</span><br><span class="line">		反向道理为localhost:8000/api/xxxxx</span><br><span class="line">		</span><br><span class="line">		当proxy_pass http://localhost:8000/;后面加斜杆后</span><br><span class="line">		反向代理为locahost:8000/xxxx</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SringBoot</title>
    <url>/2020/07/04/SringBoot/</url>
    <content><![CDATA[<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/login"</span>)</span><br><span class="line">public String login(User user, Model model)&#123;</span><br><span class="line">    User user1 = userservice.selectuser(user);</span><br><span class="line">    <span class="keyword">if</span>(user1!=null)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,user1);</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//配置类</span><br><span class="line">@Configuration</span><br><span class="line">public class Webconfigurer implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    LoginInterceptor logininterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        System.out.println(<span class="string">"???"</span>);</span><br><span class="line">        registry.addInterceptor(logininterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)//拦截所有</span><br><span class="line">                .excludePathPatterns(<span class="string">"/handler/"</span>,<span class="string">"/handler/login"</span>,</span><br><span class="line">                <span class="string">"/img/**"</span>,<span class="string">"/css/**"</span>);//放开拦截</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//拦截器</span><br><span class="line">@Component(<span class="string">"LoginInterceptor"</span>)</span><br><span class="line">public class LoginInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>)==null)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8888</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: password</span><br><span class="line">    url: jdbc:mysql://localhost:3306/user?</span><br><span class="line">    useUnicode=<span class="literal">true</span></span><br><span class="line">    &amp;characterEncodeing=utf-8</span><br><span class="line">    &amp;useSSL=<span class="literal">true</span></span><br><span class="line">    &amp;serverTimezone=UTC //时间</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  thymeleaf:</span><br><span class="line"><span class="comment">#    prefix: classpath:/static/</span></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapping/*Mapper.xml  =&gt; resoruce/mapping/</span><br><span class="line">  <span class="built_in">type</span>-aliases-package: com.yefeng.Pojo 别名</span><br></pre></td></tr></table></figure>

<h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">application-dev.yml 开发环境</span><br><span class="line">application-test.yml 测试环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure>

<h3 id="全局异常处理Exception"><a href="#全局异常处理Exception" class="headerlink" title="全局异常处理Exception"></a>全局异常处理Exception</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//实现全局异常处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = ArithmeticException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">ArithmeticException</span>(<span class="title">ArithmeticException</span> <span class="title">ex</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"message"</span>,ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>执行（）</strong></td>
<td><strong>表达式的主体;</strong></td>
</tr>
<tr>
<td><strong>第一个” *“符号</strong></td>
<td><strong>表示返回值的类型任意;</strong></td>
</tr>
<tr>
<td><strong>com.sample.service.impl</strong></td>
<td><strong>AOP所切的服务的包名，即，我们的业务部分</strong></td>
</tr>
<tr>
<td><strong>包名后面的” ..“</strong></td>
<td><strong>表示当前包及子包</strong></td>
</tr>
<tr>
<td><strong>第二个” *“</strong></td>
<td><strong>表示类名，*即所有类。此处可以自定义，下文有举例</strong></td>
</tr>
<tr>
<td><strong>。*（..）</strong></td>
<td><strong>表示任何方法名，括号表示参数，两个点表示任何参数类型</strong></td>
</tr>
</tbody></table>
<h4 id="列子"><a href="#列子" class="headerlink" title="列子"></a>列子</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(@com.springbootaop.annotaion.Valid * *(..))"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="aop通知"><a href="#aop通知" class="headerlink" title="aop通知"></a>aop通知</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Before 前置通知，在方法执行之前执行</span><br><span class="line">@After  后置通知，在方法执行之后执行（无论是否发生异常）还不能访问目标方法执行的结果</span><br><span class="line">@AfterRunning 返回通知，在方法正常结束后 返回结果之后执行 可以访问方法的返回值</span><br><span class="line">@AfterThrowing 异常通知，在方法抛出异常之后</span><br><span class="line">@Around 环绕通知，围绕着方法执行</span><br></pre></td></tr></table></figure>

<h3 id="aop登陆token验证"><a href="#aop登陆token验证" class="headerlink" title="aop登陆token验证"></a>aop登陆token验证</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当需要验证令牌时可以通过定义注解在方法头上进行使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">package</span> com.springbootaop.annotaion;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Valid &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常注解</span></span><br><span class="line"><span class="keyword">package</span> com.springbootaop.Exception;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidException</span><span class="params">(String code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ValidException&#123;"</span> +</span><br><span class="line">                <span class="string">"code="</span> + code +</span><br><span class="line">                <span class="string">", message='"</span> + message + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义切入点 切入点为自定义注解</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(@com.springbootaop.annotaion.Valid * *(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinpoint)</span> <span class="keyword">throws</span> ValidException</span>&#123;</span><br><span class="line">HttpServletRequest request= ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();<span class="comment">//这里拿到request</span></span><br><span class="line">    <span class="comment">/*获取出token,当有token的时候将起进行验证。</span></span><br><span class="line"><span class="comment">    这里有俩种方案。第一种是使用jwt 第二种是使用redis</span></span><br><span class="line"><span class="comment">    假设这里是使用了jwt的话,我们使用工具类进行匹配token是否存在或者已过期。</span></span><br><span class="line"><span class="comment">    如已经过期我们将自定义注解进行thorw出并且进行全局捕获发送给前端</span></span><br><span class="line"><span class="comment">    其redis也是一样的,我们查看redis的缓存的k==token有没有这个值就可以了，</span></span><br><span class="line"><span class="comment">    如已过期我们同样也给它发送异常并且捕获。</span></span><br><span class="line"><span class="comment">    如果是token不存在的话,我们依然也是发送异常错误出去</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span>(token!=<span class="keyword">null</span>&amp;&amp;token.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//进行jwt redis 验证</span></span><br><span class="line">       	 </span><br><span class="line">        <span class="comment">//如验证失败</span></span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> ValidException(<span class="string">"400"</span>,<span class="string">"失败"</span>);<span class="comment">//自定义错误code和提示信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>css样式</title>
    <url>/2020/02/17/css%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="边框设置在内部"><a href="#边框设置在内部" class="headerlink" title="边框设置在内部"></a>边框设置在内部</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">box-sizing: border-box;</span><br></pre></td></tr></table></figure>
<h3 id="超链接下划线隐藏"><a href="#超链接下划线隐藏" class="headerlink" title="超链接下划线隐藏"></a>超链接下划线隐藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">text-decoration: none;</span><br></pre></td></tr></table></figure>
<h3 id="文本框点击时背景颜色隐藏"><a href="#文本框点击时背景颜色隐藏" class="headerlink" title="文本框点击时背景颜色隐藏"></a>文本框点击时背景颜色隐藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">outline: none;</span><br></pre></td></tr></table></figure>
<h3 id="当文本框点击时可以获取焦点"><a href="#当文本框点击时可以获取焦点" class="headerlink" title="当文本框点击时可以获取焦点"></a>当文本框点击时可以获取焦点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.centent_in_text .centent_in_text2:focus&#123;</span><br><span class="line">	border-top: 1px solid <span class="comment">#2d78f4;</span></span><br><span class="line">    border-bottom: 1px solid <span class="comment">#2d78f4;</span></span><br><span class="line">    border-left: 1px solid <span class="comment">#2d78f4;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="颜色隐藏"><a href="#颜色隐藏" class="headerlink" title="颜色隐藏"></a>颜色隐藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">color:transparent</span><br></pre></td></tr></table></figure>
<h3 id="超过div范围隐藏"><a href="#超过div范围隐藏" class="headerlink" title="超过div范围隐藏"></a>超过div范围隐藏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker命令</title>
    <url>/2020/08/10/docker%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动docker</span><br><span class="line">sudo service docker start|restart|stop</span><br></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker search xxx https://hub.docker.com/</span><br></pre></td></tr></table></figure>
<h3 id="拉取xxx镜像"><a href="#拉取xxx镜像" class="headerlink" title="拉取xxx镜像"></a>拉取xxx镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql:<span class="string">"版本号"</span></span><br></pre></td></tr></table></figure>
<h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -d -p 8888:8080 tomcat:<span class="string">"标签"</span></span><br><span class="line"></span><br><span class="line">-d 后台运行</span><br><span class="line"></span><br><span class="line">-p映射端口号</span><br><span class="line"></span><br><span class="line">subcategorizing<span class="_">-d</span> -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:<span class="string">"标签"</span></span><br></pre></td></tr></table></figure>
<h3 id="查看运行的容器镜像"><a href="#查看运行的容器镜像" class="headerlink" title="查看运行的容器镜像"></a>查看运行的容器镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>
<h3 id="查询所有镜像"><a href="#查询所有镜像" class="headerlink" title="查询所有镜像"></a>查询所有镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure>
<h3 id="停止运行镜像容器"><a href="#停止运行镜像容器" class="headerlink" title="停止运行镜像容器"></a>停止运行镜像容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker stop 容器id</span><br></pre></td></tr></table></figure>

<h2 id="docker删除镜像"><a href="#docker删除镜像" class="headerlink" title="docker删除镜像"></a>docker删除镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rmi ·镜像名·</span><br></pre></td></tr></table></figure>

<h2 id="idea连接docker"><a href="#idea连接docker" class="headerlink" title="idea连接docker"></a>idea连接docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/hsz-csy/p/9488469.html</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>input焦点</title>
    <url>/2020/04/16/input%E7%84%A6%E7%82%B9/</url>
    <content><![CDATA[<h3 id="change-当改变时触发"><a href="#change-当改变时触发" class="headerlink" title="change 当改变时触发"></a>change 当改变时触发</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可回车确认</span><br><span class="line"><span class="variable">$item</span>.children(<span class="string">"#file"</span>).on(<span class="string">"change"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     console.log($(this).val())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="每次输入都获取值-input"><a href="#每次输入都获取值-input" class="headerlink" title="每次输入都获取值 input"></a>每次输入都获取值 input</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$item</span>.children(<span class="string">"#file"</span>).on(<span class="string">"input"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     console.log($(this).val())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="blur-失去焦点时"><a href="#blur-失去焦点时" class="headerlink" title="blur 失去焦点时"></a>blur 失去焦点时</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">不可回车键</span><br><span class="line"><span class="variable">$item</span>.children(<span class="string">"#file"</span>).on(<span class="string">"blur"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     console.log($(this).val())</span><br><span class="line">&#125;)</span><br><span class="line">//激活回车键</span><br><span class="line"><span class="variable">$item</span>.<span class="built_in">bind</span>(<span class="string">"keydown keyup"</span>,<span class="keyword">function</span>(e)&#123;</span><br><span class="line">    var key = e.which;</span><br><span class="line">    <span class="keyword">if</span> (key == 13) &#123;</span><br><span class="line">        console.log($(this).val())</span><br><span class="line">        $(this).css(<span class="string">"outline"</span>,<span class="string">"none"</span>);</span><br><span class="line">        $(this).attr(<span class="string">"readonly"</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="focus-点击获取焦点时"><a href="#focus-点击获取焦点时" class="headerlink" title="focus 点击获取焦点时"></a>focus 点击获取焦点时</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$item</span>.children(<span class="string">"#file"</span>).on(<span class="string">"focus"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     console.log($(this).val())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>io流</title>
    <url>/2020/05/14/io%E6%B5%81/</url>
    <content><![CDATA[<h3 id="InputStream类"><a href="#InputStream类" class="headerlink" title="InputStream类"></a>InputStream类</h3><p>FileOutputStream(File file)<br>FileOutputStream(String name)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FileOutputStream outputStream = new FileOutputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">OutputStream outputStream = new FileOutputStream(<span class="string">"a.txt"</span>);它的父类 加参数<span class="literal">true</span>为追加 不加置为覆盖</span><br><span class="line"></span><br><span class="line">outputStream.write(<span class="string">""</span>.getBytes()) </span><br><span class="line"></span><br><span class="line">outputStream.close() 关闭流</span><br></pre></td></tr></table></figure>
<p>通过字节流<br>public void write(int b) ask码<br>public void write(byte[] b) 字节<br>public void write(byte[] b,int off,int len)</p>
<p>byte[] bys={97,98,99,100,101};<br>outputStream.write(bys,1,3); 文本中出现bcd</p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FileInputStream inputStream = new FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">//读一个字节</span><br><span class="line">int by = 0;</span><br><span class="line"><span class="keyword">while</span> ((by=inputStream.read())!=-1)&#123;</span><br><span class="line">      System.out.println((char)by);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//读一个字节数组，一般是1024大小</span><br><span class="line">int len = 0 ;</span><br><span class="line">byte[] bys = new byte[1024];</span><br><span class="line"><span class="keyword">while</span> ((len = inputStream.read(bys)) != -1) &#123;</span><br><span class="line">    System.out.println(new String(bys,0,len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个read的返回值略有不同，read()返回读取的字节，读到末尾返回-1，read(byte[] b)返回的是读到的字节个数，读到的字节放在了bytes字节数组里，读到末尾没数据了返回-1。</p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FileInputStream inputStream = new FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">FileOutputStream outputStream = new FileOutputStream(<span class="string">"E:\\古月.jpg"</span>);</span><br><span class="line"></span><br><span class="line">//读一个字节数组，一般是1024大小</span><br><span class="line">int len = 0 ;</span><br><span class="line">byte[] bys = new byte[1024];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((len = inputStream.read(bys)) != -1) &#123;</span><br><span class="line">    outputStream.write(bys,0,len);</span><br><span class="line">&#125;</span><br><span class="line">inputStream.close();</span><br><span class="line">outputStream.close();</span><br></pre></td></tr></table></figure>

<h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(<span class="string">"E:\\modern-java.pdf"</span>));</span><br><span class="line">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(<span class="string">"F:\\汤包\\慕课大巴\\modern-java.pdf"</span>));</span><br><span class="line">int len = 0;</span><br><span class="line">byte[] bytes =new byte[1024];</span><br><span class="line"><span class="keyword">while</span> ((len=bis.read(bytes)) != -1) &#123;</span><br><span class="line">    bos.write(bytes,0,len);</span><br><span class="line">&#125;</span><br><span class="line">bis.close();</span><br><span class="line">bos.close();</span><br></pre></td></tr></table></figure>

<h3 id="将字节流转换为字符串"><a href="#将字节流转换为字符串" class="headerlink" title="将字节流转换为字符串"></a>将字节流转换为字符串</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file&#x3D;new File(realPath);</span><br><span class="line">FileInputStream in &#x3D; new FileInputStream(file);	&#x2F;&#x2F;文件读取</span><br><span class="line">String str &#x3D; &quot;&quot;;</span><br><span class="line">int size&#x3D;in.available();&#x2F;&#x2F;获取文件流</span><br><span class="line">byte[] buffer&#x3D;new byte[size];&#x2F;&#x2F;初始化byte 字节大小</span><br><span class="line">in.read(buffer);&#x2F;&#x2F;将文件读一次流</span><br><span class="line">in.close();</span><br><span class="line">str&#x3D;new String(buffer,&quot;ISO-8859-1&quot;);将字符串赋值为buffer 并且设置编码</span><br><span class="line">good.setStrimg(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> File file &#x3D; new File(path);&#x2F;&#x2F;获取路径文件</span><br><span class="line">if(!file.exists())&#123;判断文件是否存在</span><br><span class="line">    System.out.println(&quot;&#x2F;加载中&quot;);</span><br><span class="line">    byte[] bys &#x3D; article.getStrimg().getBytes(&quot;ISO-8859-1&quot;);&#x2F;&#x2F;将string以xxx编码初始化为bys大小</span><br><span class="line">    FileOutputStream outputStream &#x3D; new FileOutputStream(file);&#x2F;&#x2F;写入文件</span><br><span class="line">    InputStream is &#x3D; new ByteArrayInputStream(bys);&#x2F;&#x2F;将bys读取</span><br><span class="line">    int len &#x3D; 0;</span><br><span class="line">    byte[] buff &#x3D; new byte[1024];</span><br><span class="line">    while((len &#x3D; is.read(buff))!&#x3D;-1) &#123;</span><br><span class="line">        outputStream.write(buff, 0, len);&#x2F;&#x2F;写入文件</span><br><span class="line">    &#125;</span><br><span class="line">    is.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件的编码默认为ISO-8859-1</p>
]]></content>
  </entry>
  <entry>
    <title>io流新建文章</title>
    <url>/2020/03/13/io%E6%B5%81%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>//发布文章<br>@RequestMapping(“/show”)<br>@ResponseBody<br>public String publish(@RequestParam(“title”) String title,@RequestParam(“content”) String content,HttpServletRequest request) {<br>    String file = title+”.md”;<br>    Date date = new Date();<br>    String path = request.getServletContext().getRealPath(“/file/“);<br>    System.out.println(path);<br>    //判断博客名字是否存在 存在大于1 不存在0<br>    Article result  = articleservice.VerfiyArticleTitle(title);<br>    System.out.println(path);<br>    //创建字节输出流，绑定数据文件<br>    //创建转换流对象，构造方法，绑定字节输出流<br>    if(result==null) {<br>        try {<br>            OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(path+file),”UTF-8”);<br>            osw.write(content);<br>            Article article = new Article(title,file,date);<br>            articleservice.insert(article);<br>            osw.close();<br>        } catch (UnsupportedEncodingException | FileNotFoundException e) {<br>            // TODO Auto-generated catch block<br>            e.printStackTrace();<br>        } catch (IOException e) {<br>            // TODO Auto-generated catch block<br>            e.printStackTrace();<br>        }<br>        return “success”;<br>    }<br>    return “error”;<br>}</p>
]]></content>
  </entry>
  <entry>
    <title>json</title>
    <url>/2020/03/22/json/</url>
    <content><![CDATA[<h3 id="请求类型为JSONarray-“name”-”123”-”groos”"><a href="#请求类型为JSONarray-“name”-”123”-”groos”" class="headerlink" title="请求类型为JSONarray [{“name”:”123”,”groos”:}]"></a>请求类型为JSONarray [{“name”:”123”,”groos”:}]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@RequestBody JSONarray obj</span><br><span class="line"></span><br><span class="line">//List&lt;Object&gt; get = new ArrayList&lt;&gt;();</span><br><span class="line">这里获取的集合类 可以写成person类在里面定义好 循环person类设置属性再添加到集合里</span><br><span class="line">Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(int i =0;i&lt;obj.size();i++)&#123;</span><br><span class="line">    //获取第一组&#123;&#125;</span><br><span class="line">    JSONObject jsonObject=obj.getJSONObject(i);</span><br><span class="line">    //get.add(jsonObject.getString(<span class="string">"name"</span>));</span><br><span class="line">    //get.add(jsonObject.getString(<span class="string">"date"</span>));</span><br><span class="line">    map.put(jsonObject.getString(<span class="string">"date"</span>),jsonObject.getString(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="存放json"><a href="#存放json" class="headerlink" title="存放json"></a>存放json</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var <span class="variable">$lists</span> = new Array();</span><br><span class="line"></span><br><span class="line">var <span class="variable">$list</span> = &#123;</span><br><span class="line">    <span class="string">"name"</span>:Number($(this).siblings(<span class="string">".id"</span>).text()),</span><br><span class="line">    <span class="string">"date"</span>:$(this).siblings(<span class="string">".data"</span>).text()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$lists</span>.push(<span class="variable">$list</span>)</span><br><span class="line"></span><br><span class="line">存储id</span><br><span class="line">var <span class="variable">$lists</span> = new Array();</span><br><span class="line"></span><br><span class="line"><span class="variable">$lists</span>.push(Number($(this).siblings(<span class="string">".id"</span>).text()));</span><br><span class="line"></span><br><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure>


<h3 id="循环遍历json数据"><a href="#循环遍历json数据" class="headerlink" title="循环遍历json数据"></a>循环遍历json数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var $lists &#x3D; new Array();</span><br><span class="line">$(&quot;.list_check&quot;).each(function (index,ele) &#123;</span><br><span class="line">    if($(ele).attr(&quot;class&quot;).indexOf(&quot;list_checked&quot;)!&#x3D;-1)&#123;</span><br><span class="line">        var $list &#x3D; &#123;</span><br><span class="line">            &quot;name&quot;:Number($(this).siblings(&quot;.id&quot;).text()),</span><br><span class="line">            &quot;date&quot;:$(this).siblings(&quot;.data&quot;).text()</span><br><span class="line">        &#125;;</span><br><span class="line">        $lists.push($list)</span><br><span class="line">        &#x2F;&#x2F;$lists.push(Number($(this).siblings(&quot;.id&quot;).text()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">var json &#x3D; JSON.stringify($lists);</span><br><span class="line">console.log(json);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type:&quot;post&quot;,</span><br><span class="line">    url:&quot;DeleteId&quot;,</span><br><span class="line">    data:json,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    contentType: &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;,</span><br><span class="line">    cache:false,</span><br><span class="line">    async:false,</span><br><span class="line">    success:function (data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="请求json出现的问题"><a href="#请求json出现的问题" class="headerlink" title="请求json出现的问题"></a>请求json出现的问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">端口415 查看请求头</span><br><span class="line"></span><br><span class="line">contentType: <span class="string">"application/json;charset=UTF-8"</span></span><br><span class="line"></span><br><span class="line">端口400错误检查 查看后端请求参数</span><br><span class="line"></span><br><span class="line">当请求json的时候,它会去查看你data的是什么东西 并且设置response响应头 text/html application/json</span><br><span class="line"></span><br><span class="line">当出现text/html 传的是json 那么响应头需要是application/json</span><br><span class="line"></span><br><span class="line">dataType: <span class="string">"json"</span>, 接收参数类型 默认接收是任意类型</span><br><span class="line">设置请求头 contentType: <span class="string">"application/json;charset=UTF-8"</span>, 默认的话是 x-什么。。。</span><br><span class="line"></span><br><span class="line">请求通过到后端 Srping mvc 有@RequestPram(<span class="string">"id"</span>) String id 这种的话相当于 Request.getparam...获取值 data&#123;id:<span class="string">"name"</span>&#125;</span><br><span class="line"></span><br><span class="line">@RequestBody JSONarray array 这种注解它会自动将data里面全部json数据转换成java对象 所以不用String 去接收属性</span><br></pre></td></tr></table></figure>

<h3 id="获取json字符串"><a href="#获取json字符串" class="headerlink" title="获取json字符串"></a>获取json字符串</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var myObj = &#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"w3cschool"</span>,</span><br><span class="line">    <span class="string">"alexa"</span>:8000,</span><br><span class="line">    <span class="string">"sites"</span>:[ &#123;</span><br><span class="line">        <span class="string">"site1"</span>:[&#123;</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"2"</span>,</span><br><span class="line">            <span class="string">"age"</span>:<span class="string">"3"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"site2"</span>:<span class="string">"m.w3cschool"</span>,</span><br><span class="line">        <span class="string">"site3"</span>:<span class="string">"www.w3cschool111111"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"site1"</span>:[&#123;</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"222"</span>,</span><br><span class="line">            <span class="string">"age"</span>:<span class="string">"5"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">"site2"</span>:<span class="string">"m.cainiao.cn"</span>,</span><br><span class="line">        <span class="string">"site3"</span>:<span class="string">"www.cainiao.cn/json/"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">$.each(myObj, <span class="keyword">function</span>(k,v) &#123;</span><br><span class="line">    console.log(k);</span><br><span class="line">    //将v的数组json打印 如不是json数组将忽略</span><br><span class="line">    $.each($(v),<span class="keyword">function</span>(ele,index)&#123;</span><br><span class="line">        //数组内</span><br><span class="line">        $.each(index.site1,<span class="keyword">function</span>(ele,index)&#123;</span><br><span class="line">            console.log(index.age)</span><br><span class="line">            console.log(index.name)</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(index)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(v);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Requestbody"><a href="#Requestbody" class="headerlink" title="@Requestbody"></a>@Requestbody</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">          url:<span class="string">"PreviousArticle"</span>,</span><br><span class="line">          <span class="built_in">type</span>:<span class="string">"post"</span>,</span><br><span class="line">          data:JSON.stringify(&#123;<span class="string">"id"</span>:id&#125;),</span><br><span class="line">          cache:<span class="literal">false</span>,</span><br><span class="line">          async:<span class="literal">false</span>,</span><br><span class="line">          dataType:<span class="string">'json'</span>,</span><br><span class="line">          contentType:<span class="string">"application/json"</span>,</span><br><span class="line">          success:<span class="keyword">function</span>(data)&#123;</span><br><span class="line">              console.log(data)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">@RequestMapping(<span class="string">"/PreviousArticle"</span>)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String PreviousArticle(@RequestBody JSONObject json)&#123;</span><br><span class="line">    System.out.println(json.get(<span class="string">"id"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java线程</title>
    <url>/2020/09/04/java%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="线程静态代理模式"><a href="#线程静态代理模式" class="headerlink" title="线程静态代理模式"></a>线程静态代理模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interface factory&#123;</span><br><span class="line">    public void get();</span><br><span class="line">&#125;</span><br><span class="line">class you implements factory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"我去上班了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class test1 implements factory&#123;</span><br><span class="line">    factory f = null;</span><br><span class="line">    public test1(factory y)&#123;//聚合</span><br><span class="line">        this.f = y;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">        prefix();</span><br><span class="line">        f.get();</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">prefix</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在受理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Threed3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"???"</span>);</span><br><span class="line">        &#125;).start;</span><br><span class="line"></span><br><span class="line">        new test1(()-&gt;&#123;&#125;).get();lamda写法 但是只能为一个接口的时候才能用</span><br><span class="line">        因为线程thraed本身的类就实现了Runnable，那么你可以同过自己写的去实现于Runnable，通过构造函数Runnable放入，聚合的使用。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="synchronized锁用法"><a href="#synchronized锁用法" class="headerlink" title="synchronized锁用法"></a>synchronized锁用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>块用法是用来控制同步数据 默认为当前锁住对象<span class="keyword">this</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Threed3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test04 t4 = <span class="keyword">new</span> test04(<span class="number">10</span>, <span class="string">"富婆"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> test02(t4,<span class="string">"老外"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> test02(t4,<span class="string">"老铁"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test04</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> temp, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test02</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//int temp = 10;</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    test04 t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test02</span><span class="params">(test04 t,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">        <span class="keyword">super</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(t)&#123;<span class="comment">//同步锁数据解决</span></span><br><span class="line">            <span class="keyword">if</span>(t.temp&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"    "</span>+t.temp--);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当多个线程进来访问时,锁的对象为当前类锁。这会导致出现一个对象拿着一把锁，也就是不同对象拿着不同的锁</span></span><br><span class="line"><span class="comment">//解决方案是获取到我们要同步数据的那个对象锁，而那个对象锁是唯一的地址。所以取到的变量也是唯一，地址唯一的时候取到的锁也就是唯一的。因为多个线程等的都是同一把类锁，它的地址是一样的</span></span><br></pre></td></tr></table></figure>

<h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">public class Lock &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        lock01 l1 = new lock01();</span><br><span class="line">        new Thread(l1,<span class="string">"老王"</span>).start();</span><br><span class="line">        new Thread(l1,<span class="string">"老铁"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class lock01 implements Runnable&#123;</span><br><span class="line">    int temp = 10;</span><br><span class="line">    boolean flag = <span class="literal">true</span>;</span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void buy() throws InterruptedException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock();//上锁</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;=0)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"   "</span>+temp--);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();//释放</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程生产线"><a href="#线程生产线" class="headerlink" title="线程生产线"></a>线程生产线</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class PressFactory &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        content  Content = new content();</span><br><span class="line">        new production(Content).start();</span><br><span class="line">        new consumer(Content).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//消费者</span><br><span class="line">class consumer extends Thread&#123;</span><br><span class="line">    content  Content;</span><br><span class="line">    public consumer(content  Content)&#123;</span><br><span class="line">        this.Content = Content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i&lt;100;i++) &#123;</span><br><span class="line">            Content.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//生产者</span><br><span class="line">class production extends Thread&#123;</span><br><span class="line">    content  Content;</span><br><span class="line">    chicken c;</span><br><span class="line">    public production(content  Content)&#123;</span><br><span class="line">        this.Content = Content;</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i&lt;100;i++)&#123;</span><br><span class="line">            Content.add(new chicken(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//产品</span><br><span class="line">class chicken&#123;</span><br><span class="line">    int id;</span><br><span class="line">    public chicken(int id)&#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int <span class="function"><span class="title">getid</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//容器</span><br><span class="line">class content&#123;</span><br><span class="line">    chicken[] cken = new chicken[10];</span><br><span class="line">    //boolean flag = <span class="literal">true</span>;</span><br><span class="line">    int conut = 0;</span><br><span class="line"></span><br><span class="line">    public synchronized void add(chicken c)&#123;</span><br><span class="line">        //已经满了 让线程等待</span><br><span class="line">        <span class="keyword">if</span>(conut == cken.length)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cken[conut] = c;</span><br><span class="line">        System.out.println(<span class="string">"生产了"</span>+cken[conut].getid());</span><br><span class="line">        conut++;</span><br><span class="line">        this.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized chicken <span class="function"><span class="title">pop</span></span>()&#123;</span><br><span class="line">        //为0时无法消费</span><br><span class="line">        <span class="keyword">if</span>( 0 == conut)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //进行消费</span><br><span class="line">        conut--;</span><br><span class="line">        chicken ck = cken[conut];</span><br><span class="line">        System.out.println(<span class="string">"消费了"</span>+cken[conut].getid());</span><br><span class="line">        this.notify();</span><br><span class="line">        <span class="built_in">return</span> ck;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flag线程"><a href="#flag线程" class="headerlink" title="flag线程"></a>flag线程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class flagperform &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        tv t = new tv();</span><br><span class="line">        new player(t).start();</span><br><span class="line">        new watcher(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class player extends Thread&#123;</span><br><span class="line">    tv t;</span><br><span class="line">    public player(tv t)&#123;</span><br><span class="line">        this.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i&lt;20;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%2==0)&#123;</span><br><span class="line">                t.play(<span class="string">"哈哈哈"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                t.play(<span class="string">"6666"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class watcher extends Thread&#123;</span><br><span class="line">    tv t;</span><br><span class="line">    public watcher(tv t)&#123;</span><br><span class="line">        this.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i&lt;20;i++) &#123;</span><br><span class="line">            t.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class tv&#123;</span><br><span class="line">    String name;</span><br><span class="line">    boolean flag = <span class="literal">true</span>;</span><br><span class="line">    public synchronized void play(String name)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"正在表演"</span>+name);</span><br><span class="line">            this.notify();</span><br><span class="line">            this.name = name;</span><br><span class="line">            flag = !this.flag;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.wait();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">watch</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"正在观看"</span>+name);</span><br><span class="line">            this.notify();</span><br><span class="line">            flag = !this.flag;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.wait();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务流程"><a href="#服务流程" class="headerlink" title="服务流程"></a>服务流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务-&gt;下单-&gt;支付</span></span><br><span class="line"><span class="comment">//只有服务线程过了，才能下单，到支付</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">data</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">geta</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt; aaaaaaa"</span>);</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getb</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt; bbbbb"</span>);</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getc</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">0</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt; cccccc"</span>);</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        data datas = <span class="keyword">new</span> data();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    datas.geta();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    datas.getb();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    datas.getc();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"c"</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="8把锁"><a href="#8把锁" class="headerlink" title="8把锁"></a>8把锁</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**谁先拿到锁就为调用者**</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        //下面代码延迟一秒 所以是先发送信息</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面的发送信息也延迟了4秒，这种情况拿到对象锁就开始运行。所以这里也是先发送信息</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        //下面代码延迟一秒 所以是先发送信息</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public  synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**俩个对象各拿自己的对象锁**</span><br><span class="line">所以这里会先打印发送信息再打印收到信息 static只有一个锁</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        phone phone2 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        //下面代码延迟一秒 所以是先发送信息</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone2.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**当访问的不是synchronized方法时**</span><br><span class="line">对象就无须等待对象锁的释放</span><br><span class="line">这里就是直接先打印？？？，在打印发送消息</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        phone phone2 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.get();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public  synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"???"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**当访问的对象锁为static时，相当于请求了模板class 而一个对象只有一个唯一的class**</span><br><span class="line">当这种情况时 谁先拿到对象锁就为调用者 所以这里也是先请求发送信息</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        phone phone2 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"???"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**当访问的对象锁为static时，相当于请求了模板class 而一个对象只有一个唯一的class**</span><br><span class="line">当请求为俩个对象时 因只有一个class对象所以他们取到的还是只有一个对象锁</span><br><span class="line">所以这个时候还是谁先获得对象锁就为调用者</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        phone phone2 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone2.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"???"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**当有出现static和synchronized时**</span><br><span class="line">这里为俩个对象锁互不干涉，static为一个 synchronized为一个锁</span><br><span class="line">所以这里会先打印收到信息 再发送信息</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        phone phone2 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"???"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**当有出现static和synchronized时**</span><br><span class="line">这里为俩个对象锁互不干涉，static为一个 synchronized为一个锁</span><br><span class="line">通过俩个不同对象去访问的时候</span><br><span class="line">这里会先打印收到信息 再发送信息</span><br><span class="line">public class test03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone phone1 = new phone();</span><br><span class="line">        phone phone2 = new phone();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone1.sendmessage();</span><br><span class="line">        &#125;,<span class="string">"a"</span>).start();</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            phone2.getmessage();</span><br><span class="line">        &#125;,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class phone&#123;</span><br><span class="line">    public static synchronized void <span class="function"><span class="title">sendmessage</span></span>()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(4);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"发送信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void <span class="function"><span class="title">getmessage</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到信息"</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    public void <span class="function"><span class="title">get</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"???"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个线程</span></span><br><span class="line">ExecutorService threadpool = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//设置启动几个线程</span></span><br><span class="line">ExecutorService threadpool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//启动默认最大线程个数，以cpu速度为准</span></span><br><span class="line">ExecutorService threadpool = Executors.newCachedThreadPool();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">        threadpool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" ok"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//线程池用完 释放并且关闭线程池</span></span><br><span class="line">    threadpool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计步器（辅助类）"><a href="#计步器（辅助类）" class="headerlink" title="计步器（辅助类）"></a>计步器（辅助类）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//减法计步器，当await一直等待计步器到0才执行下面动作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContDownLactDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        CountDownLatch countdownlatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);<span class="comment">//创建计步器，当为负数会报异常</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            executor.execute(()-&gt;&#123;</span><br><span class="line">                countdownlatch.countDown();<span class="comment">//减少锁存器的计数，如果计数达到零，释放所有等待的线程。 </span></span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countdownlatch.await();<span class="comment">//导致当前线程等到锁存器计数到零，让当前访问的线程一直等待下去</span></span><br><span class="line">        System.out.println(<span class="string">"完事了"</span>);</span><br><span class="line">        executor.shutdown();<span class="comment">//线程关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getCount() 返回当前计数。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法计步器，这个可以循环使用。</span></span><br><span class="line"><span class="comment">//await会使计步器加一,并且让当前线程进行等待其他冲破障碍。所有障碍被冲破后，会执行动作。</span></span><br><span class="line"><span class="comment">//所有线程冲破障碍后，原先等待的线程会继续走下去。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" over"</span>);</span><br><span class="line">            <span class="comment">//创建一个新的 CyclicBarrier ，当给定数量的线程（线程）等待时，它将跳闸，当屏障跳闸时执行给定的屏障动作，由最后一个进入屏障的线程执行。 </span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executor.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" 到达a点"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    barrier.await();<span class="comment">//这里会加一，并且等待其他线程冲破障碍</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" 冲过a点"</span>);</span><br><span class="line"></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" 到达b点"</span>);</span><br><span class="line">                    barrier.await();<span class="comment">//这里会加一，并且等待其他线程冲破障碍</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" 冲过b点"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();<span class="comment">//线程池关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限流线程，只有拿到信号量才能进入，否则就只能等待</span></span><br><span class="line"><span class="comment">//当信号量为0时acquire()会阻止线程进入下步操作直到有信号量可以获取时才能进入下一步</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> temp = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//定义信号量。可为true。为true的话，false的话可以被闯入</span></span><br><span class="line">        <span class="comment">//信号量保证调用acquire方法的线程被选择以按照它们调用这些方法的顺序获得许可（先进先出; FIFO）。 </span></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            executor.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();<span class="comment">//获取一个信号量</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" 进入"</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    semaphore.release();<span class="comment">//释放信号量</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" 离开"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//核心线程大小</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,//最大核心线程数大小</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,//超时了没人调用就释放</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,//超时单位</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,//线程工厂 </span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler//拒绝策略</span></span></span><br><span class="line"><span class="function"><span class="params">                         )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> :</span><br><span class="line">    AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExecutorService threadpool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,<span class="comment">//最大线程为5</span></span><br><span class="line">                <span class="number">3</span>,<span class="comment">//三秒后释放，当没有线程调用时</span></span><br><span class="line">                TimeUnit.SECONDS,<span class="comment">//</span></span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">最大线程加上阻塞线程等于<span class="number">8</span>,当大于<span class="number">8</span>时。拒绝策略将会抛出异常</span><br></pre></td></tr></table></figure>

<h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个方法是用来增加一个值，而它的底层实现是根据你给出期望值再去更新的</span></span><br><span class="line">getAndIncrement()</span><br></pre></td></tr></table></figure>

<h3 id="重入锁（递归锁）"><a href="#重入锁（递归锁）" class="headerlink" title="重入锁（递归锁）"></a>重入锁（递归锁）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*当取到第一个锁后，又访问另一个锁，此时第一个锁还没有释放。当第二个锁释放后，再释放第一个*</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phone</span></span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"发消息"</span>);</span><br><span class="line">            call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"打电话"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">phone Phone = <span class="keyword">new</span> phone();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    Phone.send();</span><br><span class="line">&#125;,<span class="string">"a"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    Phone.send();</span><br><span class="line">&#125;,<span class="string">"b"</span>).start();</span><br></pre></td></tr></table></figure>

<h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicReference&lt;Thread&gt; reference = <span class="keyword">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    System.out.println(thread.getName()+<span class="string">" =&gt;上锁"</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("正在进入自旋锁");</span></span><br><span class="line">    &#125;<span class="keyword">while</span> (!reference.compareAndSet(<span class="keyword">null</span>, thread));<span class="comment">//当期望为null时，</span></span><br><span class="line">    System.out.println(thread.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    System.out.println(thread.getName()+<span class="string">" =&gt;解锁"</span>);</span><br><span class="line">    reference.compareAndSet(thread,<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(thread.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个线程取到锁，那么另一个线程进来的话取锁就会一直等待循环。直到a线程解锁后，b线程才能取到锁</span></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    test.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    test.unlock();</span><br><span class="line">&#125;,<span class="string">"a"</span>).start();</span><br><span class="line"></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    test.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    test.unlock();</span><br><span class="line">&#125;,<span class="string">"b"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为首先进来的时候是为null的，将进来的线程丢进去。而其他线程进来的时候发现这个已经不是null了，所以就一直自旋，其他线程进来也是一直自旋。只要为期望的线程类，就可以修改为null这样就做到了解锁。当解锁完，其他线程就可以有机会脱离自旋锁。（无序排队）</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>js分页</title>
    <url>/2020/02/24/js%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h3 id="初始化分页"><a href="#初始化分页" class="headerlink" title="初始化分页"></a>初始化分页</h3><p>当总页小于5时 按总页面去分 当大于等于5页时 按5页去分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(data&lt;=5)&#123;</span><br><span class="line">	<span class="keyword">for</span>(var i = 1;i&lt;=data;i++)&#123;</span><br><span class="line">		var <span class="variable">$page</span> = $(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>);</span><br><span class="line">		<span class="variable">$listpage</span>.append(<span class="variable">$page</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(var i = 1;i&lt;=5;i++)&#123;</span><br><span class="line">		var <span class="variable">$page</span> = $(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>);</span><br><span class="line">		<span class="variable">$listpage</span>.append(<span class="variable">$page</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="点击切换页面请求ajax"><a href="#点击切换页面请求ajax" class="headerlink" title="点击切换页面请求ajax"></a>点击切换页面请求ajax</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//节点移除</span><br><span class="line">	$(<span class="string">".content_in_page"</span>).remove();</span><br><span class="line">	//数据移除</span><br><span class="line">	<span class="variable">$lipage</span>.remove();</span><br><span class="line">	//每次请求都会刷新</span><br><span class="line">	//分页设置</span><br><span class="line">	//当前页等于尾页</span><br><span class="line">	<span class="keyword">if</span>(data.currentPage==data.page)&#123;</span><br><span class="line">		//总页面大于5 总页面等于尾页</span><br><span class="line">		<span class="keyword">if</span>(data.page&gt;=5)&#123;</span><br><span class="line">			<span class="keyword">for</span>(var conut = data.page-4;conut&lt;data.page;conut++)&#123;</span><br><span class="line">				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+conut+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(var conut = 1;conut&lt;data.page;conut++)&#123;</span><br><span class="line">				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+conut+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		//这个为尾页也是当前页</span><br><span class="line">		<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page currentpage"&gt;'</span>+data.currentPage+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">	//当前页面等于首页时</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.currentPage==1)&#123;</span><br><span class="line">		//循环前五个页面出来</span><br><span class="line">		<span class="keyword">if</span>(data.page&gt;=5)&#123;</span><br><span class="line">			<span class="keyword">for</span>(var i = data.currentPage;i&lt;=5;i++)&#123;</span><br><span class="line">    			//将当前页为蓝色</span><br><span class="line">    			<span class="keyword">if</span>(i==data.currentPage)&#123;</span><br><span class="line">    				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page currentpage"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">		//尾页小于5</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(var i = data.currentPage;i&lt;=data.page;i++)&#123;</span><br><span class="line">    			//将当前页为蓝色</span><br><span class="line">    			<span class="keyword">if</span>(i==data.currentPage)&#123;</span><br><span class="line">    				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page currentpage"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	//<span class="keyword">if</span>(data.currentPage&gt;1)为其他页面 只要比首页大再限定条件</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		//当点击页面为3时 那么就是前后加俩页 就为 1 2 3 4 5 </span><br><span class="line">		<span class="keyword">for</span>(var i = data.currentPage-2;i&lt;=data.addPage;i++)&#123;</span><br><span class="line">    		//大于等于1 并且 小于等于尾页</span><br><span class="line">    		<span class="keyword">if</span>(i&gt;=1&amp;&amp;i&lt;=data.page)&#123;</span><br><span class="line">    			<span class="keyword">if</span>(i==data.currentPage)&#123;</span><br><span class="line">    				//打印当前页面</span><br><span class="line">    				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page currentpage"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    				<span class="variable">$listpage</span>.append($(<span class="string">'&lt;a href="javascript:;" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	$.each(data.student,<span class="keyword">function</span>(index,ele)&#123;</span><br><span class="line">		var <span class="variable">$item</span> = crteam(index,ele);</span><br><span class="line">		<span class="variable">$list</span>.append(<span class="variable">$item</span>);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>js样式</title>
    <url>/2020/02/18/js%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="通过点击事件增加class"><a href="#通过点击事件增加class" class="headerlink" title="通过点击事件增加class"></a>通过点击事件增加class</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当前如有这个class的话那么点击会删除这个class，</span><br><span class="line">如果没有那么会新增,这个事件也可以通过removeClass来做</span><br><span class="line">$(this).toggleClass(<span class="string">"current"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="下拉框的事件"><a href="#下拉框的事件" class="headerlink" title="下拉框的事件"></a>下拉框的事件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当你点击的事件它的下个节点是隐藏的，那么将会被显示出来。</span><br><span class="line">如果是显示的话，点击就会被隐藏</span><br><span class="line">$(this).next().slideToggle();</span><br></pre></td></tr></table></figure>
<h3 id="判断当前的class是否存在"><a href="#判断当前的class是否存在" class="headerlink" title="判断当前的class是否存在"></a>判断当前的class是否存在</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当前的class是否存在这个节点 如果存在那么必然不是负一,</span><br><span class="line">这个主要思想放在循环列表判断是否存在</span><br><span class="line">$(this).attr(<span class="string">"class"</span>).indexOf(<span class="string">"current"</span>)!=-1</span><br></pre></td></tr></table></figure>
<h3 id="循环数据事件"><a href="#循环数据事件" class="headerlink" title="循环数据事件"></a>循环数据事件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$.each(这里是ajax的变量,<span class="keyword">function</span>(下标,变量元素对象)&#123;</span><br><span class="line">	var <span class="variable">$item</span> = 这里可以写<span class="keyword">function</span>(下标，变量元素)</span><br><span class="line">	或者是</span><br><span class="line">	console.log(变量对象.name等等)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">动态生成的标签那么class这些会导致无法使用</span><br><span class="line">那么就要用到delegate事件托管</span><br><span class="line">class=<span class="string">"content"</span>这里是你要托管的那块地方或者全局</span><br><span class="line">class=<span class="string">"content_in_play"</span>为这个class的节点添加点击事件</span><br><span class="line">$(<span class="string">".content"</span>).delegate(<span class="string">".content_in_play"</span>,<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">	console.log($(this))==.content_in_play</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="优先级处理"><a href="#优先级处理" class="headerlink" title="优先级处理"></a>优先级处理</h3><p>当要增加class并且换上图片时可以用这个东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">background-position: -80px -200px !important;</span><br><span class="line">!important</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2020/08/10/linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h4 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 公开权限 ./文件夹|文件名</span><br></pre></td></tr></table></figure>
<h4 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown 用户</span><br></pre></td></tr></table></figure>
<h4 id="当前解压"><a href="#当前解压" class="headerlink" title="当前解压"></a>当前解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip ./文件.zip</span><br><span class="line">tar -xvf ./文件</span><br></pre></td></tr></table></figure>
<h4 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -r FileName.zip ./文件</span><br></pre></td></tr></table></figure>
<h4 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf ./</span><br></pre></td></tr></table></figure>
<h4 id="添加xxx"><a href="#添加xxx" class="headerlink" title="添加xxx"></a>添加xxx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line"></span><br><span class="line">sudo apt-get install xxx</span><br></pre></td></tr></table></figure>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp 文件 目的</span><br></pre></td></tr></table></figure>

<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv 文件夹 到文件夹</span><br></pre></td></tr></table></figure>

<h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux 查看所有进程</span><br><span class="line"><span class="built_in">kill</span> -9 进程id</span><br></pre></td></tr></table></figure>

<h3 id="后台启动jar-加-日志"><a href="#后台启动jar-加-日志" class="headerlink" title="后台启动jar 加 日志"></a>后台启动jar 加 日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup java -jar test.jar &gt;test.txt &amp;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>md5加密</title>
    <url>/2020/03/11/md5%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package testProject;</span><br><span class="line"></span><br><span class="line">import java.security.MessageDigest;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class <span class="built_in">test</span> &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(login(<span class="string">"admin123456"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //pmq7VoTEWWLYh1ZPCDRujQ== 就是 admin123456</span><br><span class="line">   	默认加密号码</span><br><span class="line">    private static String savePassWord = <span class="string">"pmq7VoTEWWLYh1ZPCDRujQ=="</span>;</span><br><span class="line">    </span><br><span class="line">    public static boolean login(String password) &#123;</span><br><span class="line">        <span class="keyword">if</span>(savePassWord.equals(md5(password))) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    private static String md5(String password) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">        	//加密类型</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"md5"</span>);</span><br><span class="line">            </span><br><span class="line">            //生成随机东东 不可逆</span><br><span class="line">            byte[] bytes = md.digest(password.getBytes());</span><br><span class="line">            //</span><br><span class="line">            String str = Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">return</span> str;</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mybatis-plus</title>
    <url>/2020/09/19/mybatis-plus/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/myblog?useUnicode=true&amp;characterEncodeing=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: password</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>

<h3 id="注解ID"><a href="#注解ID" class="headerlink" title="注解ID"></a>注解ID</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> IdType &#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),<span class="comment">//数据库自增id</span></span><br><span class="line">    NONE(<span class="number">1</span>),<span class="comment">//无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//insert前自行set主键值</span></span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),<span class="comment">//雪花算法</span></span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>),<span class="comment">//uuid</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">Integer userid;</span><br><span class="line"><span class="comment">//关于这块需要写成integer类，否则它默认都为0。</span></span><br><span class="line"><span class="comment">//而当用雪花或者uuid的时候,需要换为long类型因为长度不够</span></span><br><span class="line"></span><br><span class="line"><span class="function">IdType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> IdType.NONE</span>;</span><br></pre></td></tr></table></figure>

<h3 id="创建时间和更新时间"><a href="#创建时间和更新时间" class="headerlink" title="创建时间和更新时间"></a>创建时间和更新时间</h3><p><img src="/.167//D:%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20200919215131761.png" alt="image-20200919215131761"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--插入当前时间戳 CURRENT_TIMESTAMP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--将update_time 的根据当前时间戳给勾上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--用于在插入时,就会同步当前时间,更新时也会同步更新时间</span></span><br></pre></td></tr></table></figure>

<h3 id="悲观锁插件"><a href="#悲观锁插件" class="headerlink" title="悲观锁插件"></a>悲观锁插件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*意图：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当要更新一条记录的时候，希望这条记录没有被别人更新</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">乐观锁实现方式：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">取出记录时，获取当前version</span></span><br><span class="line"><span class="comment">更新时，带上这个version</span></span><br><span class="line"><span class="comment">执行更新时， set version = newVersion where version = oldVersion</span></span><br><span class="line"><span class="comment">如果version不对，就更新失败*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisplusconfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*当一个线程去修改这个id时需要一个version,那么我们就需要先查询出来这个version，再进行判断这个version是不是相同的,如果是相同那么就成功修改并且加一</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当多个线程时，如果另一个线程抢占修改了version,其他线程可能已经获取到version，但是version已经被原先抢占的线程给修改了,那么就会修改失败。如果没有乐观锁这种想法的话，那么就会造成数据直接覆盖的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><h5 id="步骤1-配置com-baomidou-mybatisplus-core-config-GlobalConfig-DbConfig"><a href="#步骤1-配置com-baomidou-mybatisplus-core-config-GlobalConfig-DbConfig" class="headerlink" title="步骤1: 配置com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"></a>步骤1: 配置<code>com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig</code></h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span>  <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<h4 id="步骤2-实体类字段上加上-TableLogic注解"><a href="#步骤2-实体类字段上加上-TableLogic注解" class="headerlink" title="步骤2: 实体类字段上加上@TableLogic注解"></a>步骤2: 实体类字段上加上<code>@TableLogic</code>注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>

<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>物理删除是直接删除掉</p>
<p>逻辑删除是为了我们可以在数据库中看到删除了那些数据，以便可以恢复</p>
<p>逻辑删除是为了方便数据恢复和保护数据本身价值等等的一种方案，但实际就是删除。</p>
<ul>
<li>删除: <code>update user set deleted=1 where id = 1 and deleted=0</code></li>
<li>查找: <code>select id,name,deleted from user where deleted=0</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2020/09/23/redis/</url>
    <content><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server myconfig/redis.conf - 启动redis</span><br><span class="line"></span><br><span class="line">redis-cli -p 端口号6379 -h是ip,默认本机登陆就不用ip  -进入redis命令</span><br><span class="line"></span><br><span class="line">shutdown <span class="built_in">exit</span> -退出redis</span><br><span class="line"></span><br><span class="line">默认有16个数据库 0-15</span><br><span class="line"></span><br><span class="line">获取当前数据库的所有值 -keys *</span><br><span class="line"></span><br><span class="line">查看当前数据库大小 -dbsize</span><br><span class="line"></span><br><span class="line">删除当前数据库所有值 -flushdb</span><br><span class="line"></span><br><span class="line">删除所有数据库的值 -flushall</span><br></pre></td></tr></table></figure>

<h3 id="修改远程连接"><a href="#修改远程连接" class="headerlink" title="修改远程连接"></a>修改远程连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/XiaofanXuezhang/article/details/105957561</span><br></pre></td></tr></table></figure>



<h3 id="WindosRedis操作命令"><a href="#WindosRedis操作命令" class="headerlink" title="WindosRedis操作命令"></a>WindosRedis操作命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf 启动redis</span><br><span class="line"></span><br><span class="line">redis-cli.exe -h 本地ip 127.0.0.1 -p 端口号6379</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>shiro</title>
    <url>/2020/08/29/shiro/</url>
    <content><![CDATA[<h3 id="shiro配置config"><a href="#shiro配置config" class="headerlink" title="shiro配置config"></a>shiro配置config</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class ShiroConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(<span class="string">"SecurityManager"</span>) DefaultWebSecurityManager SecurityManager)&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">        //安全管理器</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(SecurityManager);</span><br><span class="line"></span><br><span class="line">        //授权</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterMap = new LinkedHashMap&lt;String,String&gt;();</span><br><span class="line">        //访问这个接口需要添加权限</span><br><span class="line">        filterMap.put(<span class="string">"/creatarticle"</span>,<span class="string">"perms[overstory]"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">"/"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/index"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        //设置跳转登陆请求</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/tologin"</span>);</span><br><span class="line">        //设置没有权限请求页面</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/nopermission"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="built_in">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name = <span class="string">"SecurityManager"</span>)</span><br><span class="line">    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(<span class="string">"myRealm"</span>) AdminRealm myRealm)&#123;</span><br><span class="line">        DefaultWebSecurityManager SecurityManager = new DefaultWebSecurityManager();</span><br><span class="line">        SecurityManager.setRealm(myRealm);</span><br><span class="line">        <span class="built_in">return</span> SecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    //自己添加的bean</span><br><span class="line">    @Bean(name = <span class="string">"myRealm"</span>)</span><br><span class="line">    public AdminRealm <span class="function"><span class="title">myRealm</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> new AdminRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="继承AuthorizingRealm"><a href="#继承AuthorizingRealm" class="headerlink" title="继承AuthorizingRealm"></a>继承AuthorizingRealm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class AdminRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserService userservice;</span><br><span class="line"></span><br><span class="line">    //授权</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        System.out.println(<span class="string">"授权=&gt;doGetAuthorizationInfo"</span>);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();//获取当前用户</span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        //给用户添加权限</span><br><span class="line">        info.addStringPermission(user.getPermission());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    //认证</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken Token) throws AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">"认证=&gt;doGetAuthorizationInfo"</span>);</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken usetToken = (UsernamePasswordToken)Token;</span><br><span class="line">        //查看用户是否存在  重复用主键</span><br><span class="line">        User user = userservice.QueryUser(usetToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(user==null)&#123;</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">        //将密码返回</span><br><span class="line">        <span class="built_in">return</span> new SimpleAuthenticationInfo(user,user.getUserpasswd(),<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//登陆</span><br><span class="line">    @RequestMapping(<span class="string">"/login"</span>)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String login(@RequestBody User user)&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken Token = new UsernamePasswordToken(user.getUsername(), user.getUserpasswd());</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(Token);//将返回来的密码做比对</span><br><span class="line">            <span class="keyword">if</span>(subject.isAuthenticated())&#123;</span><br><span class="line">                System.out.println(user.getUsername()+<span class="string">"认证成功"</span>);</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Token.clear();</span><br><span class="line">                System.out.println(user.getUsername()+<span class="string">"认证失败"</span>);</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"error"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">            //log.info(username+<span class="string">"验证失败，用户名不存在"</span>);</span><br><span class="line">            System.out.println(<span class="string">"验证失败，用户名不存在"</span>);</span><br><span class="line">        &#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">            //log.info(username+<span class="string">"验证失败，密码错误"</span>);</span><br><span class="line">            System.out.println(<span class="string">"验证失败，密码错误"</span>);</span><br><span class="line">        &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>###权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anon:无需认证（登录）可以访问</span><br><span class="line">authc:必须认证才可以访问</span><br><span class="line">user:只要登录过，并且记住了密码，如果设置了rememberMe的功能可以直接访问</span><br><span class="line">perms:该资源必须得到资源权限才可以访问</span><br><span class="line">role:该资源必须得到角色的权限才可以访问</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>springcloud</title>
    <url>/2020/10/12/springcloud/</url>
    <content><![CDATA[<h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类工程为了让子类的程序都是同一个jar包版本号</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.yefeng&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;springcloudapi&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;springcloud-provider-user-8001&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;springcloud-consumer-user-80&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;springcloud-eureka-7002&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;springcloud-eureka-7003&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;springcloud-eureka-7004&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;springcloud-provider-user-8002&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">         &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">         &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!-- springcloud依赖--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Hoxton.SR3&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- springboot--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!-- mysql--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;8.0.21&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!--数据源--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.1.21&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!--mybatis-plus--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!--junit--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!--log4j--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.12&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;!--logback--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<h4 id="创建api"><a href="#创建api" class="headerlink" title="创建api"></a>创建api</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yefeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloudapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--继承父类boot所有启动类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建服务（服务端）"><a href="#创建服务（服务端）" class="headerlink" title="创建服务（服务端）"></a>创建服务（服务端）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//eureke服务端为中间件称为注册中心相当于zookeeper</span></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8002</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: springcloud-provider-user2<span class="comment">//服务名,复制一份一模一样服务添加到中间件里面，称为集群</span></span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/student2?useUnicode=true&amp;characterEncodeing=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: password</span><br><span class="line"></span><br><span class="line">eureka:<span class="comment">//register-with-eureka注册服务默认为true 将服务注册到那个中间件</span></span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:7002/eureka/,http://localhost:7003/eureka/,http://localhost:7004/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> 开启注解</span><br></pre></td></tr></table></figure>

<h4 id="配置eureka"><a href="#配置eureka" class="headerlink" title="配置eureka"></a>配置eureka</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">7002</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    namespace: eureka7002.com</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false #是否向eureka注册中心注册自己</span><br><span class="line">    fetch-registry: false #当为false 表示自己为注册中心</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:7003/eureka/,http://localhost:7004/eureka/</span></span><br><span class="line"><span class="comment">//这里是将注册中心连在一起，当某一服务端口关闭,那么会去访问其他eureka</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> 开启服务</span><br><span class="line">    </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="创建消费者（客户端）"><a href="#创建消费者（客户端）" class="headerlink" title="创建消费者（客户端）"></a>创建消费者（客户端）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//Ribbon</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String rest_url = <span class="string">"http://SPRINGCLOUD-PROVIDER-USER"</span>;<span class="comment">//服务名</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;user&gt; <span class="title">getall</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> template.getForObject(rest_url+<span class="string">"/all"</span>,List<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//映射到服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/student2?useUnicode=true&amp;characterEncodeing=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    username: root</span><br><span class="line">    password: password</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span><span class="comment">//不注册到服务中心</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone:  http:<span class="comment">//localhost:7002/eureka/,http://localhost:7003/eureka/,http://localhost:7004/eureka/</span></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>关于前台传值到后台</title>
    <url>/2020/03/28/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0%E4%BC%A0%E5%80%BC%E5%88%B0%E5%90%8E%E5%8F%B0/</url>
    <content><![CDATA[<h3 id="关于ajax的data"><a href="#关于ajax的data" class="headerlink" title="关于ajax的data"></a>关于ajax的data</h3><p>data<br>类型：String<br>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p>
<p>当使用ajax的时候，contentType是默认的情况下，<br>后台使用自动注入值是没有问题的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RequestMapping(/)</span><br><span class="line">public String show(默认可以自动注入实体类)&#123;</span><br><span class="line">	这里是获取值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="那么当不使用注入实体类的话，默认String-也会根据类型而注入-但一般只能根据字符串赋值-因为前端的data是字符串"><a href="#那么当不使用注入实体类的话，默认String-也会根据类型而注入-但一般只能根据字符串赋值-因为前端的data是字符串" class="headerlink" title="那么当不使用注入实体类的话，默认String 也会根据类型而注入 但一般只能根据字符串赋值 因为前端的data是字符串"></a>那么当不使用注入实体类的话，默认String 也会根据类型而注入 但一般只能根据字符串赋值 因为前端的data是字符串</h3><p>@RequestPram</p>
<h3 id="当请求-RequstBody的话"><a href="#当请求-RequstBody的话" class="headerlink" title="当请求@RequstBody的话"></a>当请求@RequstBody的话</h3><p>那么返回必须为json字符串，而且需要用实体类来自动注入 而注入是通过用set根据命名来注入，所以名字不能乱，如果乱的话会导致参数为null，那么就会报error 一般是400参数异常<br>前端 需要加上请求头json</p>
]]></content>
  </entry>
  <entry>
    <title>关于session错误</title>
    <url>/2020/03/31/%E5%85%B3%E4%BA%8Esession%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>使用spring mvc进行Java web开发时，如果同时使用@SessionAttributes 和@ResponseBody注解，就会出现</p>
<p>“java.lang.IllegalStateException: Cannot create a session after the response has been committed ”这个错误。这是为什么呢，因为我们在创建session前，已经将response进行了提交。</p>
<p>下面通过一个例子进行说明：</p>
<p>@Controller<br>@RequestMapping(“/“)<br>@SessionAttributes(value = {“user”})<br>public class UserController {</p>
<pre><code>@ResponseBody
@RequestMapping(&quot;add&quot;)
public String method1(ModelMap map) {

    User user = new User();
    map.addAttribute(&quot;user&quot;, user);
    return &quot;success&quot;;
}

@ResponseBody
@RequestMapping(&quot;update&quot;)
public String method2(ModelMap map ) {
    System.out.println(map.get(&quot;user&quot;));
    return &quot;success&quot;;
}</code></pre><p>}</p>
<p>当访问method1时，就会报上面错误。原因是@SessionAttributes中定义了ModelMap中哪些属性将要存入session中。因为这个存入session的动作是在method1方法结束后发生的，而return 语句一结束，response就会立即被返回，因此就会造成</p>
<p>“Cannot not create session after response has been committed”。</p>
<p>解决方法：</p>
<p>在return之前，创建自己的session，即将上面的method1变成如下：</p>
<p>@ResponseBody<br>    @RequestMapping(“add”)<br>    public String method1(ModelMap map， HttpSession session) {</p>
<pre><code>    User user = new User();
    map.addAttribute(&quot;user&quot;, user);
    return &quot;success&quot;;
}</code></pre><p>这样就能保证在return之前，session已将被创建。</p>
]]></content>
  </entry>
  <entry>
    <title>函数式接口</title>
    <url>/2020/09/13/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;()&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">lamda写法</span><br><span class="line">Consumer&lt;String&gt; consumer = (s)-&gt;&#123;</span><br><span class="line">    System.out.println(s)</span><br><span class="line">&#125;</span><br><span class="line">Function&lt;String, String&gt; function = <span class="keyword">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">lamda写法</span><br><span class="line">Function&lt;String, String&gt; function = (s)-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br><span class="line">lamda的写法是依赖关系一般()-&gt;&#123;&#125;括号代表的就是<span class="keyword">new</span>了接口，只有当接口一个方法的时候。不然无法编码</span><br></pre></td></tr></table></figure>

<h3 id="Stream流式-链式编程-lamda表达式-函数式接口"><a href="#Stream流式-链式编程-lamda表达式-函数式接口" class="headerlink" title="Stream流式 链式编程 lamda表达式 函数式接口"></a>Stream流式 链式编程 lamda表达式 函数式接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user u1 = <span class="keyword">new</span> user(<span class="string">"小明"</span>,<span class="number">12</span>,<span class="string">"a"</span>);</span><br><span class="line">user u2 = <span class="keyword">new</span> user(<span class="string">"小红"</span>,<span class="number">13</span>,<span class="string">"b"</span>);</span><br><span class="line">user u3 = <span class="keyword">new</span> user(<span class="string">"小蓝"</span>,<span class="number">14</span>,<span class="string">"c"</span>);</span><br><span class="line">user u4 = <span class="keyword">new</span> user(<span class="string">"小李"</span>,<span class="number">15</span>,<span class="string">"d"</span>);</span><br><span class="line">user u5 = <span class="keyword">new</span> user(<span class="string">"小天"</span>,<span class="number">16</span>,<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;user&gt; users = Arrays.asList(u1,u2,u3,u4,u5);</span><br><span class="line"></span><br><span class="line">users.stream()</span><br><span class="line">    .filter((u)-&gt;&#123;<span class="keyword">return</span> u.getname.equals&#125;;)<span class="comment">//过滤你要的值</span></span><br><span class="line">    .map((u)-&gt;&#123;<span class="keyword">return</span> u.getT().toUpperCase();&#125;)<span class="comment">//返回你想返回的对象或者值&lt;t&gt;</span></span><br><span class="line">    .sorted((uu1,uu2)-&gt;&#123;<span class="keyword">return</span> uu2.compareTo(uu1);&#125;)<span class="comment">//compareTo比较方法</span></span><br><span class="line">    .limit(<span class="number">3</span>)<span class="comment">//查看前几条数据</span></span><br><span class="line">    .forEach((u)-&gt;&#123;System.out.println(u);&#125;);<span class="comment">//循环打印</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>十进制转换</title>
    <url>/2020/07/21/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="BCD码展示"><a href="#BCD码展示" class="headerlink" title="BCD码展示"></a>BCD码展示</h3><table>
<thead>
<tr>
<th align="center">二进制</th>
<th align="center">1</th>
<th align="center">1</th>
<th align="center">1</th>
<th align="center">1</th>
<th align="center">1</th>
<th align="center">1</th>
<th align="center">1</th>
<th align="center">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">十进制</td>
<td align="center">128</td>
<td align="center">64</td>
<td align="center">32</td>
<td align="center">16</td>
<td align="center">8</td>
<td align="center">4</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
</tbody></table>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><pre><code>111011 =&gt;1+2+0+8+16+32 = 59

58 =&gt;32+16 = 110000</code></pre><h3 id="或位运算"><a href="#或位运算" class="headerlink" title="或位运算"></a>或位运算</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">按位与运算符（&amp;）</span><br><span class="line">参加运算的两个数，按二进制位进行“与”运算。</span><br><span class="line"></span><br><span class="line">运算规则：只有两个数的二进制同时为1，结果才为1，否则为0。（负数按补码形式参加按位与运算）</span><br><span class="line"></span><br><span class="line">即 0 &amp; 0= 0 ，0 &amp; 1= 0，1 &amp; 0= 0， 1 &amp; 1= 1。</span><br><span class="line"></span><br><span class="line">例：3 &amp;5  即 00000011 &amp; 00000101 = 00000001 ，所以 3 &amp; 5的值为1。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">按位或运算符（|）</span><br><span class="line">参加运算的两个数，按二进制位进行“或”运算。</span><br><span class="line"></span><br><span class="line">运算规则：参加运算的两个数只要两个数中的一个为1，结果就为1。</span><br><span class="line"></span><br><span class="line">即  0 | 0= 0 ,  1 | 0= 1  ， 0 | 1= 1  ,  1 | 1= 1 。</span><br><span class="line"></span><br><span class="line">例：2 | 4 即 00000010 | 00000100 = 00000110 ，所以2 | 4的值为 6 。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">异或运算符（^）</span><br><span class="line">参加运算的两个数，按二进制位进行“异或”运算。</span><br><span class="line"></span><br><span class="line">运算规则：参加运算的两个数，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。</span><br><span class="line"></span><br><span class="line">即 0 ^ 0=0  ， 0 ^ 1= 1  ， 1 ^ 0= 1  ， 1 ^ 1= 0 。</span><br><span class="line"></span><br><span class="line">例： 2 ^ 4 即 00000010 ^ 00000100 =00000110 ，所以 2 ^ 4 的值为6 。</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>动态sql</title>
    <url>/2020/03/22/%E5%8A%A8%E6%80%81sql/</url>
    <content><![CDATA[<h3 id="动态语句-where-if"><a href="#动态语句-where-if" class="headerlink" title="动态语句 where if"></a>动态语句 where if</h3><p>如果where语句会自动判断and 和 or 比如说如果第一个参数为null<br>那么语句就是SELECT * FROM BLOG AND title like #{title} where 语句会自动的去掉and<br>如果 不用where 可以用 1+1 and </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findActiveBlogLike"</span></span><br><span class="line">     resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">  SELECT * FROM BLOG </span><br><span class="line">  &lt;<span class="built_in">where</span>&gt; </span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"state != null"</span>&gt;</span><br><span class="line">         state = <span class="comment">#&#123;state&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt; </span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"title != null"</span>&gt;</span><br><span class="line">        AND title like <span class="comment">#&#123;title&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span><br><span class="line">        AND author_name like <span class="comment">#&#123;author.name&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">  &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>



<h3 id="删除多个id-list-lt-属性-gt"><a href="#删除多个id-list-lt-属性-gt" class="headerlink" title="删除多个id list&lt;属性&gt;"></a>删除多个id list&lt;属性&gt;</h3><p>List<String> ids = new ArraryList<String>();<br>for(String id:ids){</String></String></p>
<p>}<br>collection=”ids” 迭代头<br>item=”id” 迭代元素<br>open=” and id in (“ 循环开始<br>separator=”,” 分隔,<br>close=”)” 末尾<br>拼接 动态sql</p>
<p>在接口请求时要用到@Parm(“指定”)<br>@Param(“ids”) List<Integer> idList</Integer></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"DeleteArticleId"</span> parameterType=<span class="string">"这里可以指定实体类的集合 如果没有的话就在请求接口指定"</span>&gt;</span><br><span class="line">    delete from article</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"ids!=null and ids.size&gt;0"</span>&gt;</span><br><span class="line">            &lt;foreach item=<span class="string">"id"</span> collection=<span class="string">"ids"</span> open=<span class="string">" and id in ("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">                <span class="comment">#&#123;id&#125;</span></span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>

<h3 id="删除多个id-int"><a href="#删除多个id-int" class="headerlink" title="删除多个id int[]"></a>删除多个id int[]</h3><p>当用数组 要指定int[] 类型 parameterType<br>数组默认属性命叫array</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;delete id=<span class="string">"DeleteArticleId"</span> parameterType=<span class="string">"int[]"</span>&gt;</span><br><span class="line">    delete from article</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"array!=null "</span>&gt;</span><br><span class="line">            &lt;foreach item=<span class="string">"id"</span> collection=<span class="string">"array"</span> open=<span class="string">" and id in ("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">                <span class="comment">#&#123;id&#125;</span></span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>多表数据库</title>
    <url>/2020/02/20/%E5%A4%9A%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete t1,t2,t3 from xuesheng t1 left join user t2 on t1.id = t2.id left join account t3 on t1.id = t3.id</span><br><span class="line"><span class="built_in">where</span> t1.id = <span class="comment">#&#123;id&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>显示外连接:</p>
<p>select * from 表A [inner] join 表B on A.主键 = B.主键<br>on后面可以继续使用where条件查询.</p>
<p>left join 的话 以左边表为主, 左边有数据, 右边没有使用null代替.左边没有的数据 , 右边也不能出现.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select * from (主表)xuesheng t1 left join user t2 on t1.id = t2.userid <span class="built_in">where</span> t1.id = <span class="string">"?"</span></span><br></pre></td></tr></table></figure>

<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p><img src="/.167//D:%5CTypora%5C%E5%9B%BE%E7%89%87%5Cimage-20200918090932192.png" alt="image-20200918090932192"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.categoryname,t2.categoryname <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">as</span> t1,<span class="keyword">test</span> <span class="keyword">as</span> t2 <span class="keyword">where</span> t1.categoryid = t2.pid</span><br><span class="line"></span><br><span class="line">将类型技术统称为pid 为 <span class="number">1</span>,categoryid不存在于<span class="number">1</span>，这样就不会出现技术类型<span class="keyword">id</span>出来。</span><br><span class="line">查找时以类型<span class="keyword">id</span>去查询子<span class="keyword">id</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>后台分页</title>
    <url>/2020/03/22/%E5%90%8E%E5%8F%B0%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@RequestMapping(<span class="string">"/Blog"</span>)</span><br><span class="line">public String show(@RequestParam(value = <span class="string">"currentpage"</span>,required = <span class="literal">false</span>) String currentpage,Model model)&#123;</span><br><span class="line">    //总数据</span><br><span class="line">    int count = articleservice.articletotal();</span><br><span class="line">    List&lt;Article&gt; article = null;</span><br><span class="line">    将页面设置为1</span><br><span class="line">    <span class="keyword">if</span>(currentpage==null) &#123;</span><br><span class="line">        currentpage = <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    int Currentpage = Integer.parseInt(currentpage);</span><br><span class="line">    //分页大小</span><br><span class="line">    int Pagesize = 4;</span><br><span class="line">    请求数据每次减一 因为mysql是从0开始查询数据<span class="built_in">limit</span></span><br><span class="line">    article = articleservice.SelectPage((Currentpage-1)*Pagesize,Pagesize);</span><br><span class="line">    分页工具类</span><br><span class="line">    ArticlePage page = new ArticlePage();</span><br><span class="line">    当前页面</span><br><span class="line">    page.setCurrentPage(<span class="string">""</span>+(Currentpage));</span><br><span class="line">    左2右2</span><br><span class="line">    page.setAddPage(<span class="string">""</span>+(Currentpage+2));</span><br><span class="line">    分页数据</span><br><span class="line">    page.setArticle(article);</span><br><span class="line">    总页面 当总数据除分页大小 如果不整除的话加1</span><br><span class="line">    page.setTotalPage(count%Pagesize==0?<span class="string">""</span>+count/Pagesize:<span class="string">""</span>+(count/Pagesize+1));</span><br><span class="line">   	</span><br><span class="line">    这里可以设置当前页面首页出现几页出来和末尾出来</span><br><span class="line"></span><br><span class="line">   	设置属性</span><br><span class="line">    model.addAttribute(<span class="string">"page"</span>,page);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="built_in">return</span> <span class="string">"Home"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//总页等于尾页</span><br><span class="line">var totalpage = [[<span class="variable">$&#123;page.TotalPage&#125;</span>]]</span><br><span class="line">//当前页面</span><br><span class="line">var currentpage = [[<span class="variable">$&#123;page.CurrentPage&#125;</span>]]</span><br><span class="line">//增加页面</span><br><span class="line">var addpage = [[<span class="variable">$&#123;page.addPage&#125;</span>]]</span><br><span class="line">//这里可以获取一个后台来的属性 设置首页要显示几个页面选择和尾页显示几个页面选择 这里我是默认为5</span><br><span class="line">//页面属性class</span><br><span class="line">var <span class="variable">$page</span> = $(<span class="string">".page"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(+currentpage&lt;=+totalpage)&#123;</span><br><span class="line">    //分页</span><br><span class="line">    <span class="keyword">if</span>(currentpage==totalpage)&#123;</span><br><span class="line">        <span class="keyword">if</span>(totalpage&gt;=5)&#123;</span><br><span class="line">            <span class="keyword">for</span>(var count = totalpage-4; count&lt;totalpage; count++)&#123;</span><br><span class="line">                <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+count+<span class="string">'" class="content_in_page"&gt;'</span>+count+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(var count = 1;count&lt;totalpage;count++)&#123;</span><br><span class="line">                <span class="variable">$page</span>.append($(<span class="string">'&lt;a class="content_in_page" href="manage?currentpage='</span>+count+<span class="string">'"  &gt;'</span>+count+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //这个为尾页也是当前页</span><br><span class="line">        <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+currentpage+<span class="string">'" class="content_in_page currentpage"&gt;'</span>+currentpage+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentpage==1)&#123;</span><br><span class="line">        //循环前五个页面出来</span><br><span class="line">        <span class="keyword">if</span>(totalpage&gt;=5)&#123;</span><br><span class="line">            <span class="keyword">for</span>(var i = currentpage;i&lt;=5;i++)&#123;</span><br><span class="line">                //将当前页为蓝色</span><br><span class="line">                <span class="keyword">if</span>(i==currentpage)&#123;</span><br><span class="line">                    <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+i+<span class="string">'" class="content_in_page currentpage"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+i+<span class="string">'" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //尾页小于5</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(var i = currentpage;i&lt;=totalpage;i++)&#123;</span><br><span class="line">                //将当前页为蓝色</span><br><span class="line">                <span class="keyword">if</span>(i==currentpage)&#123;</span><br><span class="line">                    <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+i+<span class="string">'" class="content_in_page currentpage"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+i+<span class="string">'" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        //分页格数</span><br><span class="line">        var addpagesize = addpage-currentpage;</span><br><span class="line">        var flag;</span><br><span class="line">        //倒数第二页 总页数-1</span><br><span class="line">        var lastbutone = Number(totalpage)-1;</span><br><span class="line">        //第二页 当前页加额外页面 -1</span><br><span class="line">        var secondpage = Number(currentpage)+Number(addpage)-1;</span><br><span class="line">        //当前页面等于第二页面时</span><br><span class="line">        <span class="keyword">if</span>(currentpage==2)&#123;</span><br><span class="line">            flag = secondpage;</span><br><span class="line">        //当前页面等于倒数第二页时</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentpage==lastbutone)&#123;</span><br><span class="line">            flag = lastbutone-(Number(addpage)-Number(currentpage))-1;</span><br><span class="line">        &#125;</span><br><span class="line">        //倒数第二页-（当前增加页面-当前页面）再减一 9-（12-9）-1</span><br><span class="line">        var lastPage = lastbutone-(Number(addpage)-Number(currentpage))-1;</span><br><span class="line">        //等于倒数第二页时</span><br><span class="line">        console.log(lastPage)</span><br><span class="line">        <span class="keyword">if</span> (flag==lastPage&amp;&amp;flag!=0) &#123;</span><br><span class="line">            <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+flag+<span class="string">'" class="content_in_page"&gt;'</span>+flag+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        //当点击页面为3时 那么就是前后加俩页 就为 1 2 3 4 5</span><br><span class="line">        <span class="keyword">for</span>(var i = currentpage-addpagesize;i&lt;=addpage;i++)&#123;</span><br><span class="line">            //大于等于1 并且 小于等于尾页</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=1&amp;&amp;i&lt;=totalpage)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==currentpage)&#123;</span><br><span class="line">                    //打印当前页面</span><br><span class="line">                    <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+i+<span class="string">'" class="content_in_page currentpage"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+i+<span class="string">'" class="content_in_page"&gt;'</span>+i+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //等于第二页时</span><br><span class="line">        <span class="keyword">if</span>(flag==secondpage&amp;&amp;flag&lt;totalpage)&#123;</span><br><span class="line">            <span class="variable">$page</span>.append($(<span class="string">'&lt;a href="manage?currentpage='</span>+flag+<span class="string">'" class="content_in_page"&gt;'</span>+flag+<span class="string">'&lt;/a&gt;'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/05/23/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="饿汉模式（静态常量）"><a href="#饿汉模式（静态常量）" class="headerlink" title="饿汉模式（静态常量）"></a>饿汉模式（静态常量）</h3><p>优点：实现起来简单，没有多线程同步问题。<br>缺点：java加载时就初始化了静态变量instance，如果没有被使用就占用了内存空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    // 将自身实例化对象设置为一个属性，并用static、final修饰</span><br><span class="line">    private static final Singleton instance = new Singleton();</span><br><span class="line">    </span><br><span class="line">    // 构造方法私有化</span><br><span class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 公有静态方法返回该实例</span><br><span class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="饿汉模式（静态代码块）"><a href="#饿汉模式（静态代码块）" class="headerlink" title="饿汉模式（静态代码块）"></a>饿汉模式（静态代码块）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    // 将自身实例化对象设置为一个属性，并用static、final修饰</span><br><span class="line">    private static final Singleton instance;</span><br><span class="line">    static &#123;</span><br><span class="line">    	instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 构造方法私有化</span><br><span class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 公有静态方法返回该实例</span><br><span class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化类的实例。优 缺点和上面是一样的。 2) 结论：这种单例模式可用，但是可能造成内存浪费</p>
<h3 id="懒汉模式-延迟加载"><a href="#懒汉模式-延迟加载" class="headerlink" title="懒汉模式/延迟加载"></a>懒汉模式/延迟加载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    // 将自身实例化对象设置为一个属性，并用static修饰</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    </span><br><span class="line">    // 构造方法私有化</span><br><span class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 静态方法返回该实例</span><br><span class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点 实现了单例模式<br>缺点 存在于多线程不安全</p>
<h3 id="线程安全的“懒汉模式”"><a href="#线程安全的“懒汉模式”" class="headerlink" title="线程安全的“懒汉模式”"></a>线程安全的“懒汉模式”</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    // 将自身实例化对象设置为一个属性，并用static修饰</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    </span><br><span class="line">    // 构造方法私有化</span><br><span class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 静态方法返回该实例，加synchronized关键字实现同步</span><br><span class="line">    public static synchronized Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点 实现多线程安全 单列<br>缺点 每个线程进来都要同步getInstance() 同步锁耗费性能 导致效率低</p>
<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="懒汉模式-线程安全"><a href="#懒汉模式-线程安全" class="headerlink" title="懒汉模式 线程安全"></a>懒汉模式 线程安全</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    // 将自身实例化对象设置为一个属性，并用static修饰</span><br><span class="line">    private volatile static Singleton instance;</span><br><span class="line">    </span><br><span class="line">    // 构造方法私有化</span><br><span class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 静态方法返回该实例</span><br><span class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line">        // 第一次检查instance是否被实例化出来，如果没有进入<span class="keyword">if</span>块</span><br><span class="line">        <span class="keyword">if</span>(instance == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                // 某个线程取得了类锁，实例化对象前第二次检查instance是否已经被实例化出来，如果没有，才最终实例出对象</span><br><span class="line">                <span class="keyword">if</span> (instance == null) &#123;</span><br><span class="line">                    instance = new Singleton();//初始化顺序不一定，不是一个原子的操作</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">volatile 可以避免指令重排</span><br><span class="line">可见性:可以让参数看见给main线程看见</span><br><span class="line">原子性</span><br><span class="line">有序性</span><br><span class="line"></span><br><span class="line">1.分配内存空间</span><br><span class="line">2.执行构造方法 初始化对象</span><br><span class="line">3.把这个对象指向这个空间</span><br></pre></td></tr></table></figure>
<p>内存占用率高，效率高，线程安全，多线程</p>
<h3 id="懒汉模式内部类"><a href="#懒汉模式内部类" class="headerlink" title="懒汉模式内部类"></a>懒汉模式内部类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">	private <span class="function"><span class="title">Singleton</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">	private statc class SingletonInstance&#123;</span><br><span class="line">		private static final Singleton singleton = new Singleton();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static Singleton <span class="function"><span class="title">getInstance</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> SingletonInstance.singleton</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化 时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的 实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，帮助我们 保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<p>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高 </p>
]]></content>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2020/06/09/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="盖房子"><a href="#盖房子" class="headerlink" title="盖房子"></a>盖房子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package org.Builder;</span><br><span class="line"></span><br><span class="line">public class House &#123;</span><br><span class="line">	String name;</span><br><span class="line">	String wall;</span><br><span class="line">	String tier;</span><br><span class="line">	</span><br><span class="line">	public String <span class="function"><span class="title">getName</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	public String <span class="function"><span class="title">getWall</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> wall;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setWall(String wall) &#123;</span><br><span class="line">		this.wall = wall;</span><br><span class="line">	&#125;</span><br><span class="line">	public String <span class="function"><span class="title">getTier</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> tier;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setTier(String tier) &#123;</span><br><span class="line">		this.tier = tier;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> <span class="string">"House [name="</span> + name + <span class="string">", wall="</span> + wall + <span class="string">", tier="</span> + tier + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//建造者</span><br><span class="line">package org.Builder;</span><br><span class="line"></span><br><span class="line">public abstract class HouseBuilder &#123;</span><br><span class="line">	</span><br><span class="line">	private House house = new House();</span><br><span class="line">	</span><br><span class="line">	abstract public void setHousename();</span><br><span class="line">	abstract public void setHousewall();</span><br><span class="line">	abstract public void setHousetril();</span><br><span class="line">	//饿汉模式</span><br><span class="line">	public House <span class="function"><span class="title">getHouse</span></span>() &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">return</span> house;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package org.Builder;</span><br><span class="line"></span><br><span class="line">public class CommonHouse extends HouseBuilder&#123;</span><br><span class="line">	public void <span class="function"><span class="title">setHousename</span></span>() &#123;</span><br><span class="line">		getHouse().setName(<span class="string">"普通房子"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	public void <span class="function"><span class="title">setHousewall</span></span>() &#123;</span><br><span class="line">		getHouse().setWall(<span class="string">"白色墙壁"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	public void <span class="function"><span class="title">setHousetril</span></span>() &#123;</span><br><span class="line">		getHouse().setTier(<span class="string">"3层"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package org.Builder;</span><br><span class="line">//指挥者</span><br><span class="line">public class HouseDirector &#123;</span><br><span class="line">	HouseBuilder housebuilder = null;</span><br><span class="line"></span><br><span class="line">	public void setHousebuilder(HouseBuilder housebuilder) &#123;</span><br><span class="line">		this.housebuilder = housebuilder;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public HouseDirector(HouseBuilder housebuilder) &#123;</span><br><span class="line">		this.housebuilder = housebuilder;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public House <span class="function"><span class="title">BuilderHouse</span></span>() &#123;</span><br><span class="line">		housebuilder.setHousename();</span><br><span class="line">		housebuilder.setHousewall();</span><br><span class="line">		housebuilder.setHousetril();</span><br><span class="line">		<span class="built_in">return</span> housebuilder.getHouse();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package org.Builder;</span><br><span class="line">//客户需求产品</span><br><span class="line">public class Client &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		HouseDirector houseDirector = new HouseDirector(new CommonHouse());</span><br><span class="line">		House house = houseDirector.BuilderHouse();</span><br><span class="line">		System.out.println(house);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>抽象工厂</title>
    <url>/2020/05/31/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public abstract class pizza &#123;</span><br><span class="line">	public String name;</span><br><span class="line">	public void <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">		System.out.println(name+<span class="string">"获取"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	public void <span class="function"><span class="title">cut</span></span>() &#123;</span><br><span class="line">		System.out.println(name+<span class="string">"切割"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	//abstract pizza chunk();</span><br><span class="line">	public void setname(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class pepper extends pizza&#123;</span><br><span class="line">	public <span class="function"><span class="title">pepper</span></span>() &#123;</span><br><span class="line">		setname(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class wheat extends pizza&#123;</span><br><span class="line">	public <span class="function"><span class="title">wheat</span></span>() &#123;</span><br><span class="line">		setname(<span class="string">"麦披萨"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ProessFactory &#123;</span><br><span class="line"></span><br><span class="line">	public ProessFactory(String name) &#123;</span><br><span class="line">		pizza p = null;</span><br><span class="line">		switch(name)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"wheat"</span>:</span><br><span class="line">				p = new wheat();</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"pepper"</span>:</span><br><span class="line">				p = new perper();</span><br><span class="line">			default:</span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(p!=null)&#123;</span><br><span class="line">			p.get();</span><br><span class="line">			p.cut();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		new ProessFactory(<span class="string">"wheat"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public abstract class pizza &#123;</span><br><span class="line">	public String name;</span><br><span class="line">	public void <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">		System.out.println(name+<span class="string">"获取"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	public void <span class="function"><span class="title">cut</span></span>() &#123;</span><br><span class="line">		System.out.println(name+<span class="string">"切割"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	//abstract pizza chunk();</span><br><span class="line">	public void setname(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class pepper extends pizza&#123;</span><br><span class="line">	public <span class="function"><span class="title">pepper</span></span>() &#123;</span><br><span class="line">		setname(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public abstract class Fruits &#123;</span><br><span class="line">	String name;</span><br><span class="line">//	abstract void get();</span><br><span class="line">	public void <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">		System.out.println(name+<span class="string">"获取"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	public void <span class="built_in">set</span>(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class mango extends Fruits &#123;</span><br><span class="line">	public <span class="function"><span class="title">mango</span></span>() &#123;</span><br><span class="line">		<span class="built_in">set</span>(<span class="string">"芒果"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface OrderFactory &#123;</span><br><span class="line">	public pizza createpizza();//这是披萨</span><br><span class="line">	public Fruits createFruits();</span><br><span class="line">&#125;</span><br><span class="line">//可再分工厂</span><br><span class="line">public class PizzaFactory implements OrderFactory&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public pizza <span class="function"><span class="title">createpizza</span></span>() &#123; </span><br><span class="line"></span><br><span class="line">//		String name =<span class="string">""</span>;可分支多个继承目标</span><br><span class="line">//		switch(name)&#123;</span><br><span class="line">//			<span class="keyword">case</span> <span class="string">"xxx"</span>:</span><br><span class="line">//				<span class="built_in">return</span> new pepper();</span><br><span class="line">//			default:</span><br><span class="line">//				<span class="built_in">return</span> null;</span><br><span class="line">//		&#125;</span><br><span class="line">		<span class="built_in">return</span> new Box();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public Fruits <span class="function"><span class="title">createFruits</span></span>() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		<span class="built_in">return</span> new mango();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ProessFactory &#123;</span><br><span class="line"></span><br><span class="line">	OrderFactory orderfactory;//聚合关系</span><br><span class="line">	</span><br><span class="line">	public <span class="function"><span class="title">ProessFactory</span></span>() &#123;</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">//	public ProessFactory(OrderFactory factory) &#123;</span><br><span class="line">//		setProessFactory(factory);</span><br><span class="line">//	&#125;</span><br><span class="line">	</span><br><span class="line">	private ProessFactory(OrderFactory factory) &#123;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		this.orderfactory = factory;</span><br><span class="line">		pizza p = orderfactory.createpizza();</span><br><span class="line">		p.get();</span><br><span class="line">		p.cut();</span><br><span class="line">		orderfactory.createFruits().get();</span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		new ProessFactory(new PizzaFactory());//调用某个工厂进行加工</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2020/09/02/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>###冒泡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int arr[] = &#123;32,25,-98,42,-56,111,25&#125;;</span><br><span class="line">int t ;</span><br><span class="line">int f = arr.length-1;</span><br><span class="line"><span class="keyword">while</span>(f&gt;0)&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = 0;i&lt;f;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i + 1]) &#123;</span><br><span class="line">            t = arr[i + 1];</span><br><span class="line">            arr[i + 1] = arr[i];</span><br><span class="line">            arr[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###快速排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public static void quicksort(int arr[],int low,int hight)&#123;</span><br><span class="line">        int i,j,temp,t;</span><br><span class="line">        //当递归到一定的情况时，会出现低位和高位在同一条线上，那么我们直接返回</span><br><span class="line">        <span class="keyword">if</span>(low&gt;hight)&#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i = low;//低位</span><br><span class="line">        j = hight;//高位</span><br><span class="line">        temp = arr[low];//基准位</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;//当右边的数小于基位数时，会结束循环，否则寻找下一个数</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;//当左边的数大于基位数时，会结束循环。否则寻找下一个数</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)&#123;//将值互换</span><br><span class="line">                int z = arr[i];</span><br><span class="line">            	arr[i] = arr[j];</span><br><span class="line">            	arr[j] = z;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //最后将基准为与i和j相等位置的数字交换</span><br><span class="line">        arr[low] = arr[i];//将第一个数换为中间数字</span><br><span class="line">        arr[i] = temp;//中间数为基位数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //递归调用左半数组</span><br><span class="line">        quicksort(arr, low, j-1);//</span><br><span class="line">        //递归调用右半数组</span><br><span class="line">        quicksort(arr, j+1, hight);//中间数+1为起始位 higth本身总数就减一了</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>接口和抽象接口的区别</title>
    <url>/2020/11/05/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">为空实现</span><br><span class="line">在项目中三层架构就是最经典的接口空实现，高内聚低耦合</span><br><span class="line"></span><br><span class="line">当我们这个接口想换一个实现类那么是完全没有影响的。</span><br><span class="line">因为它是空实现</span><br></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">抽象类是一种具体的实现</span><br><span class="line">当我们用抽象类dao时，都需要写一个具体方法。</span><br><span class="line"></span><br><span class="line">那么我将这些抽象类提取出来做为一个抽象类变成一个通用的crud</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.test;</span><br><span class="line"><span class="comment">//通用的crud接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">add</span><span class="params">(T c)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"crud增加"</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"crud删除"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Teacher</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.test;</span><br><span class="line"><span class="comment">//当成service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">OtherDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里的话就是传入一个参数去查出来返回对象数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> test().add(<span class="keyword">new</span> Teacher()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2020/02/19/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="清空自增自动删表"><a href="#清空自增自动删表" class="headerlink" title="清空自增自动删表"></a>清空自增自动删表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TRUNCATE 表名</span><br></pre></td></tr></table></figure>
<h3 id="增加学生"><a href="#增加学生" class="headerlink" title="增加学生"></a>增加学生</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insert into 表名 (name,age,address)values(<span class="string">"254395637"</span>,<span class="string">"16"</span>,<span class="string">"揭阳"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="修改表信息"><a href="#修改表信息" class="headerlink" title="修改表信息"></a>修改表信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update 表名 <span class="built_in">set</span> name = <span class="string">"8226942"</span> <span class="built_in">where</span> pass = <span class="string">'123'</span> and name = <span class="string">'原先名字'</span></span><br></pre></td></tr></table></figure>
<h3 id="删除表信息"><a href="#删除表信息" class="headerlink" title="删除表信息"></a>删除表信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete from 表名 <span class="built_in">where</span> name = <span class="string">"?"</span> and <span class="string">"?"</span></span><br></pre></td></tr></table></figure>
<h3 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select from 表名 <span class="built_in">where</span> name = <span class="string">"?"</span> and <span class="string">"?"</span></span><br></pre></td></tr></table></figure>
<h3 id="查询null值信息"><a href="#查询null值信息" class="headerlink" title="查询null值信息"></a>查询null值信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select from 表名 <span class="built_in">where</span> name is null</span><br><span class="line"></span><br><span class="line">update 表名 update name = <span class="string">"xxx"</span> <span class="built_in">where</span> name is null</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="keyword">CONCAT</span>(<span class="string">"aorg1"</span>，<span class="string">"aorg2"</span>) <span class="keyword">concat</span>可以多参数</span><br><span class="line"></span><br><span class="line"><span class="comment">--_下划线为一个占位符</span></span><br><span class="line"><span class="comment">--%百分号为任意个</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">条件</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查看包含小明</td>
<td>%小明%</td>
</tr>
<tr>
<td align="center">查询含有小明开头的</td>
<td>小明%</td>
</tr>
<tr>
<td align="center">查看为只有小字开头为俩个字符的</td>
<td>小_</td>
</tr>
</tbody></table>
<h3 id="查询空字段"><a href="#查询空字段" class="headerlink" title="查询空字段"></a>查询空字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span> ARTICLETITLE = <span class="string">''</span> </span><br><span class="line"><span class="comment">--查询不为null</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span> ARTICLETITLE != <span class="string">''</span></span><br></pre></td></tr></table></figure>



<h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">desc</span> 表名  <span class="comment">--表结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> 表名 <span class="comment">--显示表的索引</span></span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> categoryid <span class="keyword">desc</span> <span class="comment">--降序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> categoryid <span class="keyword">asc</span> <span class="comment">--升序</span></span><br></pre></td></tr></table></figure>

<h3 id="重置自增"><a href="#重置自增" class="headerlink" title="重置自增"></a>重置自增</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 auto_increment= 起始值</span><br></pre></td></tr></table></figure>

<h3 id="生成唯一索引"><a href="#生成唯一索引" class="headerlink" title="生成唯一索引"></a>生成唯一索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter table 表名 unique <span class="string">"字段名"</span></span><br></pre></td></tr></table></figure>

<h3 id="查询时间范围"><a href="#查询时间范围" class="headerlink" title="查询时间范围"></a>查询时间范围</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select count(1) from 表名 <span class="built_in">where</span> 字段名 <span class="string">'2020-xx-xxxx 时间点'</span> and <span class="string">'指定时间段'</span></span><br><span class="line"></span><br><span class="line">getdate() <span class="comment">#获取当前时间段</span></span><br><span class="line"></span><br><span class="line">DateDiff(dd,<span class="string">'时间字段名'</span>,getdate())=0 表示为当天</span><br><span class="line"></span><br><span class="line">DateDiff(dd,<span class="string">'时间字段名'</span>,getdate())&gt;0 时间字段超过当前时间会为整数，没超过为负数。</span><br></pre></td></tr></table></figure>

<h3 id="SqlServer"><a href="#SqlServer" class="headerlink" title="SqlServer"></a>SqlServer</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">设置自增主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> USER_JOB_EXE_REC <span class="keyword">ADD</span> <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">IDENTITY</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段 <span class="built_in">INT</span> <span class="keyword">IDENTITY</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="SqlServer-4-0包找不到"><a href="#SqlServer-4-0包找不到" class="headerlink" title="SqlServer 4.0包找不到"></a>SqlServer 4.0包找不到</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqljdbc4的下载地址（百度网盘）：https://pan.baidu.com/s/1ZdVJmRZCoc6uLs3T9QmMjw　　提取码：dshx</span><br><span class="line"></span><br><span class="line">mvn install:install-file -Dfile=sqljdbc4-4.0.jar -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=4.0 -Dpackaging=jar</span><br><span class="line"></span><br><span class="line">修改命令</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>标签&lt;url-pattern&gt;</title>
    <url>/2020/03/01/%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p>我们知道在写<url-pattern>时有一种通配符的使用写法，即*</url-pattern></p>
<p>1.当我使用<url-pattern>/*</url-pattern>时，我们可以匹配所有的请求，即所有的请求都会经过该标签对应的Servlet</p>
<p>此时就需要注意静态资源的请求，因为当我们使用<a href="http://localhost:8080/we/login.html时，依然会匹配该Servlet，" target="_blank" rel="noopener">http://localhost:8080/we/login.html时，依然会匹配该Servlet，</a></p>
<p>而很多静态资源其实是不需要经过Servlet的，例如：js，css，html，jsp，img等静态资源文件，此时就需要在该Servlet中对静态资源做特殊处理</p>
<p>2.如果配有如下两个<url-pattern>标签时，URL地址为<a href="http://localhost:8080/we/index时又是如何匹配的呢？" target="_blank" rel="noopener">http://localhost:8080/we/index时又是如何匹配的呢？</a></url-pattern></p>
<p>url-pattern/index url-pattern</p>
<p>url-pattern/*url-pattern</p>
<p>上边我们已经说过，/*可以匹配所有的请求，而/index也可以匹配我们的URL地址，此时URL地址会自动且优先的进行精确匹配，即/index，</p>
<p>且只匹配一次，也就是说一旦匹配到一个Servlet即执行该Servlet不再对其他Servlet进行匹配，</p>
<p>当我们输入一个<a href="http://localhost:8080/we/login时，由于此时匹配不到/login所以只能匹配/*了" target="_blank" rel="noopener">http://localhost:8080/we/login时，由于此时匹配不到/login所以只能匹配/*了</a></p>
<p>3.在Servlet Path部分我们还可以使用更精确的匹配，例如：</p>
<p><url-pattern>/index/login</url-pattern>匹配<a href="http://localhost:8080/we/index/login" target="_blank" rel="noopener">http://localhost:8080/we/index/login</a></p>
<p><url-pattern>/index/logout</url-pattern>匹配<a href="http://localhost:8080/we/index/logout" target="_blank" rel="noopener">http://localhost:8080/we/index/logout</a></p>
<p>此时/index/login和/index/logout才是我们的Servlet Path</p>
<p> 4.我们可以通过使用<url-pattern>*.do</url-pattern>来过滤请求，</p>
<p>这样如果我们在页面中的请求中添加后缀名.do就可以避免对静态资源的过滤了，也就不需要对静态资源做特殊处理了</p>
<p>注:<url-pattern>/</url-pattern>和<url-pattern>/*</url-pattern>效果是一样的</p>
<p>/匹配url斜杆下不含后缀</p>
<p>jsp是动态资源 当前/拦截的时候，图形解析器为jsp的话，会跳转到jsp。</p>
<p>当/*的时候，它会拦截到所有资源路径。如还是jsp的话，将报404.（因为它相当于访问了静态资源）</p>
<p><a href="mvc:annotation-driven/">mvc:annotation-driven/</a>拦截所有请求<br><a href="mvc:default-servlet-handler/">mvc:default-servlet-handler/</a>访问静态资源</p>
<p>/*匹配 url 后缀 .jsp .html</p>
]]></content>
  </entry>
  <entry>
    <title>自定义异常类</title>
    <url>/2020/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class (命名)Exception extends Exception&#123;</span><br><span class="line">	public (命名)Exception(String errorMessage)&#123;</span><br><span class="line">		//重写父类的异常打印信息</span><br><span class="line">		super(errorMessage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="抛出自定义异常"><a href="#抛出自定义异常" class="headerlink" title="抛出自定义异常"></a>抛出自定义异常</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public void verity() throws Exception&#123;</span><br><span class="line">	<span class="keyword">if</span>(age&gt;100)&#123;</span><br><span class="line">		throws new (命名)Exception(<span class="string">"报错"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>继承、实现、依赖、关联、聚合、组合的联系与区别</title>
    <url>/2020/09/01/%E7%BB%A7%E6%89%BF%E3%80%81%E5%AE%9E%E7%8E%B0%E3%80%81%E4%BE%9D%E8%B5%96%E3%80%81%E5%85%B3%E8%81%94%E3%80%81%E8%81%9A%E5%90%88%E3%80%81%E7%BB%84%E5%90%88%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>###依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public person class&#123;</span><br><span class="line"></span><br><span class="line">	public void get(Student student)&#123;</span><br><span class="line">		student.read();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student class&#123;</span><br><span class="line">	public void <span class="function"><span class="title">read</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当需要另一个类的方法，可以通过这样的依赖关系去获取。</span><br></pre></td></tr></table></figure>

<p>###关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//单向关联</span><br><span class="line">public person class&#123;</span><br><span class="line">	private Student student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student class&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//双向关联</span><br><span class="line">public class Customer  </span><br><span class="line">&#123;  </span><br><span class="line">    private Product[] products;  </span><br><span class="line">    ……  </span><br><span class="line">&#125;  </span><br><span class="line">public class Product  </span><br><span class="line">&#123;  </span><br><span class="line">    private Customer customer;  </span><br><span class="line">    ……  </span><br><span class="line">&#125;</span><br><span class="line">//自关联</span><br><span class="line">public person class&#123;</span><br><span class="line">	private person p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###聚合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public person class&#123;</span><br><span class="line">	private Student student;</span><br><span class="line">	public person(Student student)&#123;</span><br><span class="line">		this.student = student;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public student class&#123;</span><br><span class="line">	String name;</span><br><span class="line">	int age;</span><br><span class="line">	public student(String name,Int age)&#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">		this.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###组合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    Brain brain;</span><br><span class="line">    public <span class="function"><span class="title">Person</span></span>()&#123;//组合</span><br><span class="line">        brain=new Brain();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person person=new Person();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">class Brain&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>自定义注解</title>
    <url>/2020/10/14/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="Target类型"><a href="#Target类型" class="headerlink" title="@Target类型"></a>@Target类型</h3><table>
<thead>
<tr>
<th align="left">Target类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ElementType.TYPE</td>
<td>应用于类、接口（包括注解类型）、枚举</td>
</tr>
<tr>
<td align="left">ElementType.FIELD</td>
<td>应用于属性（包括枚举中的常量）</td>
</tr>
<tr>
<td align="left">ElementType.METHOD</td>
<td>应用于方法</td>
</tr>
<tr>
<td align="left">ElementType.PARAMETER</td>
<td>应用于方法的形参</td>
</tr>
<tr>
<td align="left">ElementType.CONSTRUCTOR</td>
<td>应用于构造函数</td>
</tr>
<tr>
<td align="left">ElementType.LOCAL_VARIABLE</td>
<td>应用于局部变量</td>
</tr>
<tr>
<td align="left">ElementType.ANNOTATION_TYPE</td>
<td>应用于注解类型</td>
</tr>
<tr>
<td align="left">ElementType.PACKAGE</td>
<td>应用于包</td>
</tr>
<tr>
<td align="left">ElementType.TYPE_PARAMETER</td>
<td>1.8版本新增，应用于类型变量）</td>
</tr>
<tr>
<td align="left">ElementType.TYPE_USE</td>
<td>1.8版本新增，应用于任何使用类型的语句中（例如声明语句、泛型和强制转换语句中的类型）</td>
</tr>
</tbody></table>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><table>
<thead>
<tr>
<th>生命周期类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>RetentionPolicy.SOURCE</td>
<td>编译时被丢弃，不包含在类文件中</td>
</tr>
<tr>
<td>RetentionPolicy.CLASS</td>
<td>JVM加载时被丢弃，包含在类文件中，默认值</td>
</tr>
<tr>
<td>RetentionPolicy.RUNTIME</td>
<td>由JVM 加载，包含在类文件中，在运行时可以被获取到</td>
</tr>
</tbody></table>
<h3 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h3><p>表明该注解标记的元素可以被Javadoc 或类似的工具文档化</p>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p> 表明使用了@Inherited注解的注解，所标记的类的子类也会拥有这个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE,ElementType.FIELD&#125;)<span class="comment">//type在类头，field在属性注解</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Info &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "tracy"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDelete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Info</span>(isDelete = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="meta">@Info</span>(isDelete = <span class="keyword">true</span>)</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">boolean</span> isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;?&gt; clazz = person.getClass();</span><br><span class="line">		<span class="comment">//获取对象的注解</span></span><br><span class="line">        Info annotation = clazz.getAnnotation(Info<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		system.out.println(annotation.(获取注解的值))</span><br><span class="line">        <span class="comment">//获取对象属性的注解</span></span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        </span><br><span class="line">        Info info = field.getAnnotation(Info<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(info.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringMvc过滤器拦截</title>
    <url>/2020/02/19/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%8B%A6%E6%88%AA/</url>
    <content><![CDATA[<h3 id="过滤器xml-配值"><a href="#过滤器xml-配值" class="headerlink" title="过滤器xml 配值"></a>过滤器xml 配值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!-- 对所有请求都拦截，公共拦截器可以有多个 --&gt;</span><br><span class="line">    &lt;bean name=<span class="string">"baseInterceptor"</span> class=<span class="string">"cn.zifangsky.interceptor.BaseInterceptor"</span> /&gt;</span><br><span class="line">    &lt;!-- &lt;bean name=<span class="string">"testInterceptor"</span> class=<span class="string">"cn.zifangsky.interceptor.TestInterceptor"</span> /&gt; --&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;       </span><br><span class="line">        &lt;&lt;!-- 拦截路径 --&gt;</span><br><span class="line">        &lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">        &lt;!-- 指定不拦截路径 &lt;mvc:exclude-mapping path=<span class="string">"/登陆页面以及静态资源"</span>/&gt;--&gt;</span><br><span class="line">        &lt;bean class=<span class="string">"cn.zifangsky.interceptor.TestInterceptor"</span> /&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>
<h3 id="配值public-class-BaseInterceptor-implements-HandlerInterceptor"><a href="#配值public-class-BaseInterceptor-implements-HandlerInterceptor" class="headerlink" title="配值public class BaseInterceptor implements HandlerInterceptor"></a>配值public class BaseInterceptor implements HandlerInterceptor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">"************TestInterceptor preHandle executed**********"</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>;//这里<span class="literal">false</span>为不释放 <span class="literal">true</span>为释放</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">"************TestInterceptor postHandle executed**********"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">"************TestInterceptor afterCompletion executed**********"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>jvm</title>
    <url>/2020/11/26/jvm/</url>
    <content><![CDATA[<h3 id="类装载"><a href="#类装载" class="headerlink" title="类装载"></a>类装载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.运行时常量池：在方法区中，每个类型都对应一个常量池，存放该类型所用到的所有常量，常量池中存储了诸如文字字符串、<span class="keyword">final</span>变量值、类名和方法名常量。</span><br><span class="line"><span class="number">2</span>.字段信息：字段信息存放类中声明的每一个字段的信息，包括字段的名、类型、修饰符。</span><br><span class="line"><span class="number">3</span>.方法信息：类中声明的每一个方法的信息，包括方法名、返回值类型、参数类型、修饰符、异常、方法的字节码。</span><br><span class="line">(在编译的时候，就已经将方法的局部变量、操作数栈大小等确定并存放在字节码中，在装载的时候，随着类一起装入方法区。) </span><br><span class="line"><span class="number">4</span>.静态变量：类变量，类的所有实例都共享，我们只需知道，在方法区有个静态区，静态区专门存放静态变量和静态块。</span><br><span class="line"><span class="number">5</span>.到类classloader的引用：到该类的类装载器的引用。 </span><br><span class="line"><span class="number">6</span>.到类<span class="class"><span class="keyword">class</span> 的引用：虚拟机为每一个被装载的类型创建一个<span class="title">class</span>实例，用来代表这个被装载的类。</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/2020/12/08/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="定时任务开启-Scheduled"><a href="#定时任务开启-Scheduled" class="headerlink" title="定时任务开启@Scheduled"></a>定时任务开启@Scheduled</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> 开启注解</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">	<span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)<span class="comment">//配置时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">字段　　允许值　　允许的特殊字符 </span><br><span class="line">秒     　 0-59 　　　　, - * / </span><br><span class="line">分     　 0-59　　　　 , - * / </span><br><span class="line">小时      0-23 　　　　, - * / </span><br><span class="line">日期      1-31 　　　　, - * ? / L W C </span><br><span class="line">月份      1-12 　　　　, - * / </span><br><span class="line">星期      1-7 　　　　  , - * ? / L C <span class="comment"># </span></span><br><span class="line">年     1970-2099 　　, - * /</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">“*”字符被用来指定所有的值。</span><br><span class="line">如：</span><br><span class="line"><span class="string">"*"</span>：字符在分钟的字段域里表示“每分钟”。 </span><br><span class="line">“?”：字符只在日期域和星期域中使用。它被用来指定“非明确的值”。</span><br><span class="line">当你需要通过在这两个域中的一个来指定一些东西的时候，它是有用的。看下面的例子你就会明白。 </span><br><span class="line">月份中的日期和星期中的日期这两个元素时互斥的一起应该通过设置一个问号来表明不想设置那个字段。</span><br><span class="line">“-”：字符被用来指定一个范围。如：“10-12”在小时域意味着“10点、11点、12点”。</span><br><span class="line">“,”：字符被用来指定另外的值。如：“MON,WED,FRI”在星期域里表示”星期一、星期三、星期五”。</span><br><span class="line">“/”：字符用于指定增量。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子如下：</span><br><span class="line">0 0 10,14,16 * * ? 每天上午10点，下午2点，4点</span><br><span class="line">0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">0 0 12 ? * WED 表示每个星期三中午12点 </span><br><span class="line"><span class="string">"0 0 12 * * ?"</span> 每天中午12点触发 </span><br><span class="line"><span class="string">"0 15 10 ? * *"</span> 每天上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 * * ?"</span> 每天上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 * * ? *"</span> 每天上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 * * ? 2005"</span> 2005年的每天上午10:15触发 </span><br><span class="line"><span class="string">"0 * 14 * * ?"</span> 在每天下午2点到下午2:59期间的每1分钟触发 </span><br><span class="line"><span class="string">"0 0/5 14 * * ?"</span> 在每天下午2点到下午2:55期间的每5分钟触发 </span><br><span class="line"><span class="string">"0 0/5 14,18 * * ?"</span> 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </span><br><span class="line"><span class="string">"0 0-5 14 * * ?"</span> 在每天下午2点到下午2:05期间的每1分钟触发 </span><br><span class="line"><span class="string">"0 10,44 14 ? 3 WED"</span> 每年三月的星期三的下午2:10和2:44触发 </span><br><span class="line"><span class="string">"0 15 10 ? * MON-FRI"</span> 周一至周五的上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 15 * ?"</span> 每月15日上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 L * ?"</span> 每月最后一日的上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 ? * 6L"</span> 每月的最后一个星期五上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 ? * 6L 2002-2005"</span> 2002年至2005年的每月的最后一个星期五上午10:15触发 </span><br><span class="line"><span class="string">"0 15 10 ? * 6#3"</span> 每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>aop记录ip浏览次数</title>
    <url>/2020/12/16/aop%E8%AE%B0%E5%BD%95ip%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h3 id="记录浏览次数"><a href="#记录浏览次数" class="headerlink" title="记录浏览次数"></a>记录浏览次数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修饰在需要记录次数的请求上。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.yun.Anntation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> QuestionView &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuestionViewAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.yun.Anntation.QuestionView)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuestionViewAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"QuestionViewAspect()"</span>)<span class="comment">//环绕通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> ValidException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 产品上线使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 获取RequestAttributes</span></span><br><span class="line"><span class="comment">//        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span></span><br><span class="line"><span class="comment">//        // 从获取RequestAttributes中获取HttpServletRequest的信息</span></span><br><span class="line"><span class="comment">//        HttpServletRequest request = (HttpServletRequest) requestAttributes</span></span><br><span class="line"><span class="comment">//        .resolveReference(RequestAttributes.REFERENCE_REQUEST);</span></span><br><span class="line">        <span class="comment">//String ipAddr = IpUtil.getIpAddr(request);获取到当前访问的ip</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        String roundIp = IpUtil.getRoundIp();<span class="comment">//这里是获取随机ip</span></span><br><span class="line">        </span><br><span class="line">        Object[] args = joinPoint.getArgs();<span class="comment">//获取出参数</span></span><br><span class="line">        String arg = (String) args[<span class="number">0</span>];</span><br><span class="line">        String questionId = <span class="string">""</span>+Base64.decode(arg);<span class="comment">//记录xxx网页的id</span></span><br><span class="line">        System.out.println(<span class="string">"缓存"</span>+questionId);</span><br><span class="line">        <span class="keyword">long</span> num = redisUtil.add(questionId, roundIp);</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"该ip值已经存在了   "</span>+roundIp);</span><br><span class="line">        &#125;</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proceed = joinPoint.proceed();<span class="comment">//获取到切入的返回结果</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();<span class="comment">//异常通知</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;<span class="comment">//将结果返回给前端</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定时任务</span></span><br><span class="line"><span class="keyword">package</span> com.yun.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yun.Mapper.QuestionMapper;</span><br><span class="line"><span class="keyword">import</span> com.yun.api.Question;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> QuestionMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"0 */10 *  * * ? "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; allQuestion = mapper.getAllQuestion();</span><br><span class="line">        <span class="comment">//获取出所有的网页的id，逐个进行清除缓存，将浏览次数更新到数据库中</span></span><br><span class="line">        allQuestion.forEach(questionId-&gt;&#123;</span><br><span class="line">            String key = questionId+<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">long</span> size = redisUtil.size(key);</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Question currentQuestion = mapper.getCurrentQuestion(questionId);</span><br><span class="line">                Integer version = currentQuestion.getVersion();</span><br><span class="line">                Integer views = (<span class="keyword">int</span>)size+currentQuestion.getViews();</span><br><span class="line">                System.out.println(views+<span class="string">"     当前版本号乐观锁    "</span>+version++);</span><br><span class="line">                currentQuestion.setViews(views);</span><br><span class="line">                currentQuestion.setNewVersion(version);</span><br><span class="line">                System.out.println(currentQuestion.getNewVersion()+<span class="string">"        "</span>+currentQuestion.getVersion());</span><br><span class="line">                <span class="keyword">int</span> num = mapper.viewTask(currentQuestion);</span><br><span class="line">                <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    redisUtil.deleted(key);</span><br><span class="line">                    System.out.println(<span class="string">"清楚缓存"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"开启定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ip工具类"><a href="#ip工具类" class="headerlink" title="ip工具类"></a>ip工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yun.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.lionsoul.ip2region.DataBlock;</span><br><span class="line"><span class="keyword">import</span> org.lionsoul.ip2region.DbConfig;</span><br><span class="line"><span class="keyword">import</span> org.lionsoul.ip2region.DbMakerConfigException;</span><br><span class="line"><span class="keyword">import</span> org.lionsoul.ip2region.DbSearcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ResourceUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 获取访问ip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String[] ips ;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ips = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"47.110.124.167"</span>,</span><br><span class="line">                <span class="string">"42.192.72.177"</span>,</span><br><span class="line">                <span class="string">"1.197.204.53"</span>,</span><br><span class="line">                <span class="string">"171.44.230.82"</span>,</span><br><span class="line">                <span class="string">"182.86.191.200"</span>,</span><br><span class="line">                <span class="string">"218.27.251.100"</span>,</span><br><span class="line">                <span class="string">"49.86.181.215"</span>,</span><br><span class="line">                <span class="string">"115.218.4.56"</span>,</span><br><span class="line">                <span class="string">"147.75.113.110"</span>,</span><br><span class="line">                <span class="string">"123.163.118.235"</span>,</span><br><span class="line">                <span class="string">"27.206.179.4"</span>,</span><br><span class="line">                <span class="string">"110.241.136.65"</span>,</span><br><span class="line">                <span class="string">"113.194.22.73"</span>,</span><br><span class="line">                <span class="string">"61.228.26.120"</span>,</span><br><span class="line">                <span class="string">"175.42.129.11"</span>,</span><br><span class="line">                <span class="string">"188.94.229.145"</span>,</span><br><span class="line">                <span class="string">"27.220.162.114"</span>,</span><br><span class="line">                <span class="string">"125.79.49.95"</span>,</span><br><span class="line">                <span class="string">"111.126.82.215"</span>,</span><br><span class="line">                <span class="string">"122.138.147.101"</span>,</span><br><span class="line">                <span class="string">"114.102.10.55"</span>,</span><br><span class="line">                <span class="string">"171.35.160.68"</span>,</span><br><span class="line">                <span class="string">"27.192.171.196"</span>,</span><br><span class="line">                <span class="string">"27.206.72.29"</span>,</span><br><span class="line">                <span class="string">"140.255.139.241"</span>,</span><br><span class="line">                <span class="string">"123.101.237.158"</span>,</span><br><span class="line">                <span class="string">"117.69.179.64"</span>,</span><br><span class="line">                <span class="string">"140.250.90.48"</span>,</span><br><span class="line">                <span class="string">"119.108.176.126"</span>,</span><br><span class="line">                <span class="string">"140.255.189.178"</span>,</span><br><span class="line">                <span class="string">"111.79.185.152"</span>,</span><br><span class="line">                <span class="string">"58.253.156.21"</span>,</span><br><span class="line">                <span class="string">"221.201.205.57"</span>,</span><br><span class="line">                <span class="string">"113.195.166.69"</span>,</span><br><span class="line">                <span class="string">"123.163.121.159"</span>,</span><br><span class="line">                <span class="string">"183.166.96.16"</span>,</span><br><span class="line">                <span class="string">"59.33.57.125"</span>,</span><br><span class="line">                <span class="string">"114.102.37.174"</span>,</span><br><span class="line">                <span class="string">"114.239.146.20"</span>,</span><br><span class="line">                <span class="string">"106.111.53.229"</span>,</span><br><span class="line">                <span class="string">"117.91.249.29"</span>,</span><br><span class="line">                <span class="string">"114.99.160.229"</span>,</span><br><span class="line">                <span class="string">"117.69.12.152"</span>,</span><br><span class="line">                <span class="string">"223.241.117.72"</span>,</span><br><span class="line">                <span class="string">"58.22.177.194"</span>,</span><br><span class="line">                <span class="string">"171.35.169.134"</span>,</span><br><span class="line">                <span class="string">"115.206.175.187"</span>,</span><br><span class="line">                <span class="string">"115.218.2.78"</span>,</span><br><span class="line">                <span class="string">"222.189.191.117"</span>,</span><br><span class="line">                <span class="string">"115.221.245.205"</span>,</span><br><span class="line">                <span class="string">"123.52.97.130"</span>,</span><br><span class="line">                <span class="string">"111.126.83.39"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ipAddress = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"x-forwarded-for"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">                <span class="keyword">if</span> (ipAddress.equals(<span class="string">"127.0.0.1"</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 根据网卡取本机配置的IP</span></span><br><span class="line">                    InetAddress inet = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        inet = InetAddress.getLocalHost();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ipAddress = inet.getHostAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span></span><br><span class="line">            <span class="keyword">if</span> (ipAddress != <span class="keyword">null</span> &amp;&amp; ipAddress.length() &gt; <span class="number">15</span>) &#123; <span class="comment">// "***.***.***.***".length()</span></span><br><span class="line">                <span class="comment">// = 15</span></span><br><span class="line">                <span class="keyword">if</span> (ipAddress.indexOf(<span class="string">","</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    ipAddress = ipAddress.substring(<span class="number">0</span>, ipAddress.indexOf(<span class="string">","</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ipAddress=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ipAddress = this.getRequest().getRemoteAddr();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ipAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] getAddress(String ip)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DbConfig dbConfig = <span class="keyword">new</span> DbConfig();</span><br><span class="line">            <span class="comment">//File file = ResourceUtils.getFile("D:\\ip2region.db");</span></span><br><span class="line">            File file = ResourceUtils.getFile(<span class="string">"/var/yun/ip2region.db"</span>);</span><br><span class="line">            String dbFile = file.getAbsolutePath();</span><br><span class="line"><span class="comment">//            String dbFile = Thread.currentThread().getContextClassLoader().getResource("").getPath()+ "ip2region.db";</span></span><br><span class="line"><span class="comment">//            dbFile = dbFile.substring(1);</span></span><br><span class="line">            DbSearcher searcher = <span class="keyword">new</span> DbSearcher(dbConfig, dbFile);</span><br><span class="line">            <span class="comment">//采用Btree搜索</span></span><br><span class="line">            DataBlock block = searcher.btreeSearch(ip);</span><br><span class="line">            String[] split = block.getRegion().split(<span class="string">"\\|"</span>);</span><br><span class="line">            <span class="keyword">return</span> split;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DbMakerConfigException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRoundIp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ipSize = ips.length;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(ipSize);</span><br><span class="line">        <span class="keyword">return</span> ips[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2020/12/16/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#获取反射对象</span><br><span class="line">Class&lt;?&gt; z = <span class="keyword">new</span> test().getClass();</span><br><span class="line"></span><br><span class="line">Method[] methods = z.getMethods(); #获取所有共有方法 继承的方法</span><br><span class="line">Method[] declaredMethods = z.getDeclaredMethods(); # 获取所有方法包括私有</span><br><span class="line">    </span><br><span class="line">Field[] fields = z.getFields(); #获取所有共有属性</span><br><span class="line">Field[] declaredFields = z.getDeclaredFields(); #获取所有公有属性</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt;[] constructors = z.getConstructors();#获取构造方法</span><br><span class="line">Constructor&lt;?&gt;[] declaredConstructors = z.getDeclaredConstructors();</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>aop日志</title>
    <url>/2020/12/16/aop%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h3 id="aop注解"><a href="#aop注解" class="headerlink" title="aop注解"></a>aop注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">当controller方法上被修饰了这个注解，那么都会经过aop切入点进行增强</span><br><span class="line"></span><br><span class="line">#定义注解 </span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//jvm加载时 运行可以被访问到</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Valid &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#定义切面类</span><br><span class="line"><span class="keyword">package</span> com.springbootaop.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.springbootaop.Exception.ValidException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springbootaop.annotaion.Valid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//需要将切面类纳入ipc容器中,否则aop不会生效。或者定义config类配置bean</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static final Logger Log = LoggerFactory.getLogger(LogAspects.class);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	#定义切入点</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(@com.springbootaop.annotaion.Valid * *(..))"</span>)</span><br><span class="line">    <span class="comment">//@Pointcut("execution(public * com.springbootaop.Controller.AopController.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">	#返回通知 意思为请求成功后,获取到返回结果</span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"pointCut()"</span>,returning = <span class="string">"key"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logstart</span><span class="params">(JoinPoint joinPoint,Object key)</span> <span class="keyword">throws</span> ValidException </span>&#123;</span><br><span class="line">        HttpServletRequest request= ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line"><span class="comment">//        String token = request.getHeader("token");</span></span><br><span class="line"><span class="comment">//        if(!token.equals("1234"))&#123;</span></span><br><span class="line"><span class="comment">//            throw new ValidException("400","失败");</span></span><br><span class="line"><span class="comment">//        &#125;\</span></span><br><span class="line"><span class="comment">//        if(Log.isInfoEnabled())&#123;</span></span><br><span class="line"><span class="comment">//            Log.info("before"+joinPoint);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//System.out.println("目标方法 "+);</span></span><br><span class="line">        <span class="comment">//System.out.println(joinPoint.getSignature().getDeclaringType().getSimpleName());</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Log log = <span class="keyword">new</span> Log();<span class="comment">//自定义对象</span></span><br><span class="line">            String methodName = joinPoint.getSignature().getName();<span class="comment">//方法名</span></span><br><span class="line">            String targetName = joinPoint.getTarget().getClass().getName();<span class="comment">//代理的对象类名</span></span><br><span class="line"></span><br><span class="line">            Object[] args = joinPoint.getArgs();<span class="comment">//当前方法有多少个参数</span></span><br><span class="line">            Class targetClass = Class.forName(targetName);<span class="comment">//获取到代理的对像class</span></span><br><span class="line">            Method[] methods = targetClass.getMethods();<span class="comment">//获取所有方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method:methods)&#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(methodName))&#123;<span class="comment">//判断方法与拦截的一致</span></span><br><span class="line">                    log.setOpenMethod(targetName+<span class="string">"."</span>+methodName);</span><br><span class="line">                    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();<span class="comment">//获取到方法的参数有几个</span></span><br><span class="line">                    <span class="keyword">if</span>(parameterTypes.length== args.length)&#123;</span><br><span class="line">                        <span class="comment">//获取出注解的值对其进行封装</span></span><br><span class="line">                        String value = method.getAnnotation(Valid<span class="class">.<span class="keyword">class</span>).<span class="title">value</span>()</span>;</span><br><span class="line">                        log.setOpenDesc(value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; parameterMap = Analysis(request.getParameterMap());</span><br><span class="line"></span><br><span class="line">            log.setOpenReqParam(JSON.toJSONString(parameterMap));</span><br><span class="line">            log.setOpenIp(<span class="string">"127.0.0.1"</span>);<span class="comment">//获取到请求的ip</span></span><br><span class="line">            log.setOpenResParam(JSON.toJSONString(key));</span><br><span class="line">            log.setOpenUrl(request.getRequestURI().toString());</span><br><span class="line">            System.out.println(log);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//Log.error("==后置异常通知==");</span></span><br><span class="line">            <span class="comment">//Log.error("异常信息&#123;&#125;",e.getMessage());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//异常通知 将异常进行捕获添加到日志中</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"pointCut()"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint joinPoint,Exception ex)</span></span>&#123;</span><br><span class="line">        HttpServletRequest request= ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExceptionLog exLog = <span class="keyword">new</span> ExceptionLog();</span><br><span class="line">            String methodName = joinPoint.getSignature().getName();<span class="comment">//方法名</span></span><br><span class="line">            String targetName = joinPoint.getTarget().getClass().getName();<span class="comment">//代理的对象类名</span></span><br><span class="line">            Object[] args = joinPoint.getArgs();<span class="comment">//当前方法有多少个参数</span></span><br><span class="line">            Class targetClass = <span class="keyword">null</span>;<span class="comment">//获取到代理的对像class</span></span><br><span class="line">            targetClass = Class.forName(targetName);</span><br><span class="line">            Method[] methods = targetClass.getMethods();<span class="comment">//获取所有方法</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Method method:methods)&#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(methodName))&#123;<span class="comment">//判断方法与拦截的一致</span></span><br><span class="line">                    exLog.setExMethod(targetName+<span class="string">"."</span>+methodName);</span><br><span class="line">                    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();<span class="comment">//获取到方法的参数有几个</span></span><br><span class="line">                    <span class="keyword">if</span>(parameterTypes.length== args.length)&#123;</span><br><span class="line">                        String value = method.getAnnotation(Valid<span class="class">.<span class="keyword">class</span>).<span class="title">value</span>()</span>;</span><br><span class="line">                        exLog.setExDesc(value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Map&lt;String, String&gt; parameterMap = Analysis(request.getParameterMap());</span><br><span class="line">            exLog.setExReqParam(JSON.toJSONString(parameterMap));<span class="comment">//参数</span></span><br><span class="line">            exLog.setExIp(<span class="string">"127.0.0.1"</span>);<span class="comment">//捕获当前ip</span></span><br><span class="line">            exLog.setExName(ex.getClass().getName());<span class="comment">//操作人</span></span><br><span class="line">            exLog.setExMessage(ex.getMessage());<span class="comment">//信息</span></span><br><span class="line">            exLog.setExUrl(request.getRequestURL().toString());<span class="comment">//请求的url</span></span><br><span class="line">            System.out.println(exLog);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">Analysis</span><span class="params">(Map&lt;String,String[]&gt; map)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; nmap = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">            nmap.put(key,map.get(key)[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nmap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日志实体类"><a href="#日志实体类" class="headerlink" title="日志实体类"></a>日志实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springbootaop.Log;</span><br><span class="line"><span class="comment">//success 日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    String openModel;</span><br><span class="line">    String openType;</span><br><span class="line">    String openDesc;</span><br><span class="line">    String openMethod;</span><br><span class="line">    String openReqParam;</span><br><span class="line">    String openResParam;</span><br><span class="line">    String openUserId;</span><br><span class="line">    String openUserName;</span><br><span class="line">    String openIp;</span><br><span class="line">    String openUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenModel</span><span class="params">(String openModel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openModel = openModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenType</span><span class="params">(String openType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openType = openType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenDesc</span><span class="params">(String openDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openDesc = openDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenMethod</span><span class="params">(String openMethod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openMethod = openMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenReqParam</span><span class="params">(String openReqParam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openReqParam = openReqParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenResParam</span><span class="params">(String openResParam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openResParam = openResParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenUserId</span><span class="params">(String openUserId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openUserId = openUserId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenUserName</span><span class="params">(String openUserName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openUserName = openUserName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenIp</span><span class="params">(String openIp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openIp = openIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOpenUrl</span><span class="params">(String openUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.openUrl = openUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Log&#123;"</span> +</span><br><span class="line">                <span class="string">"openModel='"</span> + openModel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openType='"</span> + openType + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openDesc='"</span> + openDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openMethod='"</span> + openMethod + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openReqParam='"</span> + openReqParam + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openResParam='"</span> + openResParam + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openUserId='"</span> + openUserId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openUserName='"</span> + openUserName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openIp='"</span> + openIp + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", openUrl='"</span> + openUrl + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.springbootaop.Log;</span><br><span class="line"><span class="comment">//异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionLog</span> </span>&#123;</span><br><span class="line">    String ExModel;</span><br><span class="line">    String ExType;</span><br><span class="line">    String ExDesc;</span><br><span class="line"></span><br><span class="line">    String ExMethod;</span><br><span class="line">    String ExName;</span><br><span class="line">    String ExReqParam;</span><br><span class="line">    String ExMessage;</span><br><span class="line">    String ExUserId;</span><br><span class="line">    String ExUserName;</span><br><span class="line">    String ExIp;</span><br><span class="line">    String ExUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExModel</span><span class="params">(String exModel)</span> </span>&#123;</span><br><span class="line">        ExModel = exModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExType</span><span class="params">(String exType)</span> </span>&#123;</span><br><span class="line">        ExType = exType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExDesc</span><span class="params">(String exDesc)</span> </span>&#123;</span><br><span class="line">        ExDesc = exDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExMethod</span><span class="params">(String exMethod)</span> </span>&#123;</span><br><span class="line">        ExMethod = exMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExName</span><span class="params">(String exName)</span> </span>&#123;</span><br><span class="line">        ExName = exName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExReqParam</span><span class="params">(String exReqParam)</span> </span>&#123;</span><br><span class="line">        ExReqParam = exReqParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExMessage</span><span class="params">(String exMessage)</span> </span>&#123;</span><br><span class="line">        ExMessage = exMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExUserId</span><span class="params">(String exUserId)</span> </span>&#123;</span><br><span class="line">        ExUserId = exUserId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExUserName</span><span class="params">(String exUserName)</span> </span>&#123;</span><br><span class="line">        ExUserName = exUserName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExIp</span><span class="params">(String exIp)</span> </span>&#123;</span><br><span class="line">        ExIp = exIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExUrl</span><span class="params">(String exUrl)</span> </span>&#123;</span><br><span class="line">        ExUrl = exUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ExceptionLog&#123;"</span> +</span><br><span class="line">                <span class="string">"ExModel='"</span> + ExModel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExType='"</span> + ExType + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExDesc='"</span> + ExDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExMethod='"</span> + ExMethod + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExName='"</span> + ExName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExReqParam='"</span> + ExReqParam + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExMessage='"</span> + ExMessage + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExUserId='"</span> + ExUserId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExUserName='"</span> + ExUserName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExIp='"</span> + ExIp + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", ExUrl='"</span> + ExUrl + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>正则</title>
    <url>/2020/12/16/%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\d: 匹配一个数字字符。等价于[0-9] </span><br><span class="line">\D: 匹配一个非数字字符。等价于^ [0-9]</span><br><span class="line">\w：匹配任何字类字符，包括下划线。与<span class="string">"[A-Za-z0-9_]"</span>等效。[\\w[^_]]去掉下划线</span><br><span class="line">\s: 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v] </span><br><span class="line">. ：匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</span><br><span class="line">*：匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</span><br><span class="line">+：匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。 </span><br><span class="line">|:将两个匹配条件进行逻辑“或”（Or）运算</span><br><span class="line">[0-9]&#123;6&#125;:匹配连续6个0-9之间的数字 </span><br><span class="line">\d+：匹配至少一个0-9之间的数字</span><br><span class="line"></span><br><span class="line">String str = <span class="string">"123456"</span>;</span><br><span class="line">String regex = <span class="string">"[0-9]&#123;3,5&#125;"</span>匹配0-9 为3到5个字符</span><br><span class="line">String regex = <span class="string">"1[2345][1-36-9]&#123;9&#125;"</span>匹配第一位为1,第二位为2 3 4 5,后面9位为1到3 6到9则匹配成功</span><br><span class="line">String str = <span class="string">"12a6B985Ccv65"</span>;</span><br><span class="line">str.splict(<span class="string">"[a-zA-z]"</span>)匹配为字母进行分组</span><br><span class="line">str.replace(<span class="string">"[a-zA-Z]"</span>,<span class="string">"%"</span>)匹配到字母将起来替换</span><br><span class="line">regex[1-9&amp;&amp;[^56]] 匹配1到9 减去56 也也可以 5-8</span><br><span class="line"></span><br><span class="line">String str4 = <span class="string">"254395637@qq.com"</span>;</span><br><span class="line">String regex = <span class="string">"[\\w&amp;&amp;[^_]]+@[\\w]+\\.[com]+"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String regex = <span class="string">"(https[.[^\"]]+)"</span>;</span><br><span class="line">String str5 = <span class="string">"&lt;img alt=\"每日最新单曲推荐\" src=\"https://img1.kuwo.cn/star/userpl2015/10/13/1607999825895_132026710_150.jpg\" class=\"pic\" data-v-71f1ac8b=\"\" data-src=\"https://img1.kuwo.cn/star/userpl2015/10/13/1607999825895_132026710_150.jpg\" lazy=\"loaded\"&gt;"</span>;	</span><br><span class="line">Pattern pattern = Pattern.compile(regex);</span><br><span class="line">Matcher matcher = pattern.matcher(str5);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">	System.out.println(matcher.group(1));</span><br><span class="line">&#125;</span><br><span class="line">String regex = <span class="string">"http(.+[\\.jpg\\.png])"</span>; 匹配图片</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>beetsql</title>
    <url>/2021/01/11/beetsql/</url>
    <content><![CDATA[<h3 id="内置crud"><a href="#内置crud" class="headerlink" title="内置crud"></a>内置crud</h3><p>首先需要将dao继承extends BaseMapper<T>,就可以使用下面的这些内置的crud语句</T></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用插入，插入一个实体对象到数据库，所以字段将参与操作，除非你使用ColumnIgnore注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * （数据库表有自增主键调用此方法）如果实体对应的有自增主键，插入一个实体到数据库，设置assignKey为true的时候，将会获取此主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autDbAssignKey 是否获取自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(T entity,<span class="keyword">boolean</span> autDbAssignKey)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入实体到数据库，对于null值不做处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertTemplate</span><span class="params">(T entity)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果实体对应的有自增主键，插入实体到数据库，对于null值不做处理,设置assignKey为true的时候，将会获取此主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autDbAssignKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertTemplate</span><span class="params">(T entity,<span class="keyword">boolean</span> autDbAssignKey)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入实体。此方法不会获取自增主键的值，如果需要，建议不适用批量插入，适用</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * insert(T entity,true);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBatch</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * （数据库表有自增主键调用此方法）如果实体对应的有自增主键，插入实体到数据库，自增主键值放到keyHolder里处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">KeyHolder <span class="title">insertReturnKey</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键更新对象，所以属性都参与更新。也可以使用主键ColumnIgnore来控制更新的时候忽略此字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键更新对象，只有不为null的属性参与更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateTemplateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键删除对象，如果对象是复合主键，传入对象本生即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键获取对象，如果对象不存在，则会抛出一个Runtime异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">unique</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键获取对象，如果对象不存在，返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">single</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键获取对象，如果在事物中执行会添加数据库行级锁(select * from table where id = ? for update)，如果对象不存在，返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">lock</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回实体对应的所有数据库记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">all</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回实体对应的一个范围的记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">all</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回实体在数据库里的总数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">allCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板查询，返回符合模板得所有结果。beetlsql将取出非null值（日期类型排除在外），从数据库找出完全匹配的结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">template</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板查询，返回一条结果,如果没有，返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">templateOne</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">template</span><span class="params">(T entity,<span class="keyword">int</span> start,<span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 符合模板得个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">templateCount</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单表的基于模板查询的翻页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">templatePage</span><span class="params">(PageQuery&lt;T&gt; query)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行一个jdbc sql模板查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">execute</span><span class="params">(String sql,Object... args)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行一个更新的jdbc sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql,Object... args )</span></span>;</span><br><span class="line">    <span class="function">SQLManager <span class="title">getSQLManager</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个Query对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Query&lt;T&gt; <span class="title">createQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个LambdaQuery对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LambdaQuery&lt;T&gt; <span class="title">createLambdaQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如说我们需要判断一些值的话，我们就可以使用LambdaQuery<T> createLambdaQuery();</T></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQuery&lt;ZhXcUser&gt; lambdaQuery = zhXcUserDao.createLambdaQuery();</span><br><span class="line">这样的话，我们会获取到一个lambda的泛型</span><br><span class="line">lambdaQuery.andEq(ZhXcUser::getBranchNo, deptId);</span><br><span class="line">这样可以添加判断条件</span><br><span class="line">List&lt;ZhXcUser&gt; users = lambdaQuery.select();</span><br><span class="line">返回集合对象</span><br></pre></td></tr></table></figure>

<p>需要多表查询的时候，我们选择采用类似于md文件。写的sql模板语句并且使用分页插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PageQuery&lt;ZhXcUser&gt; page = new PageQuery&lt;&gt;();</span><br><span class="line">page.setPageNumber(pageNumber);设置为第几页</span><br><span class="line">page.setPageSize(pageSize);设置分页大小</span><br><span class="line">page.setPara(<span class="string">"branchNo"</span>,deptId);设置需要动态的的属性</span><br><span class="line">page.setPara(<span class="string">"userid"</span>,userid);</span><br><span class="line">this.zhXcUserDao.getUserList(page);调用我们自己定义的sql语句</span><br><span class="line"><span class="built_in">return</span> page;</span><br><span class="line">/************sql模板语句**************/</span><br><span class="line">select</span><br><span class="line">@<span class="function"><span class="title">pageTag</span></span>()&#123;</span><br><span class="line">    id as id,</span><br><span class="line">    accept as accept,</span><br><span class="line">    a.ins_id as insId,</span><br><span class="line">    b.ins_name as insName,</span><br><span class="line">    allot_account as allotAccount,</span><br><span class="line">    allot_name as allotName,</span><br><span class="line">    review_account as reviewAccount,</span><br><span class="line">    review_name as reviewName,</span><br><span class="line">    allot_time as allotTime,</span><br><span class="line">    review_end_time as reviewEndTime,</span><br><span class="line">    review_start_time as reviewStartTime</span><br><span class="line">@&#125;</span><br><span class="line">from zh_xc_message a join zh_xc_medicalInstitution b on a.ins_id = b.ins_id and a.isdelete = 0</span><br><span class="line">@<span class="function"><span class="title">where</span></span>()&#123;//动态<span class="built_in">where</span>条件</span><br><span class="line">	@<span class="keyword">if</span>(deptId!=<span class="string">""</span>)&#123;</span><br><span class="line">    	and b.branch_no = <span class="comment">#deptId#</span></span><br><span class="line">    @&#125;</span><br><span class="line">	@<span class="keyword">if</span>(userId!=<span class="string">""</span>)&#123;</span><br><span class="line">		and review_account like <span class="string">'%'</span>+<span class="comment">#userId#+'%'</span></span><br><span class="line">	@&#125;<span class="keyword">if</span>(accept!=<span class="string">"0"</span>)&#123;</span><br><span class="line">    	and accept = <span class="comment">#accept#</span></span><br><span class="line">    @&#125;</span><br><span class="line">@&#125;</span><br><span class="line">@<span class="function"><span class="title">pageIgnoreTag</span></span>()&#123;//将id往高降序</span><br><span class="line">	order by id desc</span><br><span class="line">@&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>jpa</title>
    <url>/2021/01/20/jpa/</url>
    <content><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/message?useUnicode=true&amp;characterEncodeing=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span>  <span class="comment"># 第一次建表create  后面用update，要不然每次重启都会新建表</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"consume"</span>,</span><br><span class="line">            joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>),</span><br><span class="line">            inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"good_id"</span>))</span><br><span class="line">    List&lt;Good&gt; goods;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Good&gt; <span class="title">getGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoods</span><span class="params">(List&lt;Good&gt; goods)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goods = goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_good"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Good</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"goods"</span>)</span><br><span class="line">    List&lt;User&gt; user ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(List&lt;User&gt; user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dao层</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Good</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Controller层</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJap</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GoodDao goodDao;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; Map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setName(<span class="string">"小李子"</span>);</span><br><span class="line">        Good good1 = <span class="keyword">new</span> Good();</span><br><span class="line">        Good good2 = <span class="keyword">new</span> Good();</span><br><span class="line">        good1.setName(<span class="string">"辣条"</span>);</span><br><span class="line">        good2.setName(<span class="string">"薯条"</span>);</span><br><span class="line">        goodDao.save(good1);</span><br><span class="line">        goodDao.save(good2);</span><br><span class="line">        List&lt;Good&gt; goods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        goods.add(good1);</span><br><span class="line">        goods.add(good2);</span><br><span class="line">        user1.setGoods(goods);</span><br><span class="line">        userDao.save(user1);</span><br><span class="line">        <span class="comment">/*******级联删除*******/</span></span><br><span class="line">        User one = userDao.getOne(<span class="number">12</span>);</span><br><span class="line">        userDao.delete(one);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">一个用户可以有多个商品，一个商品可以有多个人。</span><br><span class="line">上面的列子是,先创建一个用户,添加俩个商品，当保存用户的时候，会有一张中间表为consume将其添加用户id绑定商品id，建立起连接关系。当删除用户的时候，会将用户表的id信息删掉，并删掉consume的关系id表。</span><br></pre></td></tr></table></figure>

<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_identity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Identity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)<span class="comment">//主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@Table(name = "t_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @ManyToMany</span></span><br><span class="line"><span class="comment">//    @JoinTable(name = "consume",</span></span><br><span class="line"><span class="comment">//            joinColumns = @JoinColumn(name = "user_id"),</span></span><br><span class="line"><span class="comment">//            inverseJoinColumns = @JoinColumn(name = "good_id"))</span></span><br><span class="line"><span class="comment">//    private List&lt;Good&gt; goods;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL) 生成关系维护端 当删除用户id也会删除身份id</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"identity"</span>,referencedColumnName = <span class="string">"id"</span>,foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>,value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    <span class="keyword">private</span> Identity identity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    Identity identity = <span class="keyword">new</span> Identity();</span><br><span class="line">    identity.setNum(<span class="number">1241413123</span>);</span><br><span class="line">    identityDao.save(identity);</span><br><span class="line">    user.setIdentity(identity);</span><br><span class="line">    <span class="comment">/****删除****/</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    userDao.delete(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_article"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)<span class="comment">//主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//主键生成策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"article_id"</span>,referencedColumnName = <span class="string">"id"</span>,foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>,value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; articles;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    List&lt;Article&gt; articles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Article article1 = <span class="keyword">new</span> Article();</span><br><span class="line">    Article article2 = <span class="keyword">new</span> Article();</span><br><span class="line">    article1.setName(<span class="string">"qeqwreqwr"</span>);</span><br><span class="line">    article2.setName(<span class="string">"qeqqweqe1231wreqwr"</span>);</span><br><span class="line">    articleDao.save(article1);</span><br><span class="line">    articleDao.save(article2);</span><br><span class="line">    articles.add(article1);</span><br><span class="line">    articles.add(article2);</span><br><span class="line">    user.setArticles(articles);</span><br><span class="line">    userDao.save(user);</span><br><span class="line">    <span class="comment">/*****删除*****/</span></span><br><span class="line">    userDao.delete(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2020/05/30/MyBatis/</url>
    <content><![CDATA[<h2 id="resultmap的细节问题"><a href="#resultmap的细节问题" class="headerlink" title="resultmap的细节问题"></a>resultmap的细节问题</h2><p>表的id不能冲突到。<br>property 是java的初始变量<br>column 要与数据库的值一一对应</p>
<p>（1）mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值。</p>
<p>（2）mybatis在处理${}时，就是把${}替换成变量的值。</p>
<p>（3）使用#{}可以有效的防止SQL注入，提高系统安全性。原因在于：预编译机制。预编译完成之后，SQL的结构已经固定，即便用户输入非法参数，也不会对SQL的结构产生影响，从而避免了潜在的安全风险</p>
<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"com.liulanghan.Blog"</span> id=<span class="string">"BlogResult"</span>&gt;    </span><br><span class="line">    &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;    </span><br><span class="line">    &lt;result column=<span class="string">"title"</span> property=<span class="string">"title"</span>/&gt;    </span><br><span class="line">    &lt;result column=<span class="string">"content"</span> property=<span class="string">"content"</span>/&gt;    </span><br><span class="line">    &lt;result column=<span class="string">"owner"</span> property=<span class="string">"owner"</span>/&gt;    </span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"selectBlog"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"BlogResult"</span>&gt;    </span><br><span class="line">      select * from t_blog <span class="built_in">where</span> id = <span class="comment">#&#123;id&#125;    </span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"BookCategroy"</span> id=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	&lt;id property=<span class="string">"typeid"</span> column=<span class="string">"type_id"</span>&gt;&lt;/id&gt;</span><br><span class="line">	&lt;result property=<span class="string">"booktype"</span> column=<span class="string">"book_type"</span>/&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;collection property=<span class="string">"books"</span> ofType=<span class="string">"Book"</span>&gt;</span><br><span class="line">		&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">		&lt;result property=<span class="string">"book_name"</span> column=<span class="string">"book_name"</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">"press"</span> column=<span class="string">"press"</span>/&gt;</span><br><span class="line">		&lt;result property=<span class="string">"price"</span> column=<span class="string">"price"</span>/&gt;</span><br><span class="line">	&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"bookmessage"</span> resultMap=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	SELECT bc.*,b.* FROM book_categroy </span><br><span class="line">	AS bc inner JOIN book AS b</span><br><span class="line">	ON  bc.type_id = b.book_type</span><br><span class="line">	<span class="built_in">where</span> bc.type_id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>oftype 是实体类的集合 list<Book><br>id 必须一对一对应<br>一对多的话就用<collection></collection></Book></p>
<h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"book"</span> id=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;&lt;/id&gt;</span><br><span class="line">	&lt;result property=<span class="string">"book_name"</span> column=<span class="string">"book_name"</span>/&gt;</span><br><span class="line">	&lt;result property=<span class="string">"press"</span> column=<span class="string">"press"</span>/&gt;</span><br><span class="line">	&lt;result property=<span class="string">"price"</span> column=<span class="string">"price"</span>/&gt;</span><br><span class="line">	&lt;association property=<span class="string">"bookcategroy"</span> javaType=<span class="string">"BookCategroy"</span>&gt;</span><br><span class="line">		&lt;id property=<span class="string">"typeid"</span> column=<span class="string">"type_id"</span>&gt;&lt;/id&gt;</span><br><span class="line">		&lt;result property=<span class="string">"booktype"</span> column=<span class="string">"book_type"</span>/&gt;</span><br><span class="line">	&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"bookmessage"</span> resultMap=<span class="string">"selectmessage"</span>&gt;</span><br><span class="line">	SELECT bc.*,b.* FROM book_categroy </span><br><span class="line">	AS b inner JOIN book_categroy  AS bc</span><br><span class="line">	ON  b.book_type = bc.type_id</span><br><span class="line">	<span class="built_in">where</span> b.id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>多对一就用<association></association></p>
<h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a><where>动态sql</where></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">where</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"id!=null"</span>&gt;and \<span class="comment">#&#123;id&#125;,&lt;/if&gt;</span></span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"name!=null"</span>&gt;and \<span class="comment">#&#123;name&#125;,&lt;/if&gt;</span></span><br><span class="line">&lt;/<span class="built_in">where</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以去除结尾的，和多余的and</p>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a><set>sql</set></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update order </span><br><span class="line">&lt;<span class="built_in">set</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"id!=null"</span>&gt;id = \<span class="comment">#&#123;id&#125;,&lt;/if&gt;</span></span><br><span class="line">	&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"name!=null"</span>&gt;name = \<span class="comment">#&#123;name&#125;&lt;/if&gt;</span></span><br><span class="line">&lt;/<span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure>
<p>去掉多余的,</p>
<h3 id="sql-1"><a href="#sql-1" class="headerlink" title="sql"></a><trim>sql</trim></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"InsertStudent"</span> parameterType=<span class="string">"Student"</span>&gt;</span><br><span class="line"></span><br><span class="line">Insert into stud_info </span><br><span class="line"></span><br><span class="line">&lt;trim prefix=<span class="string">"("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'id!=null'</span>&gt;id,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'sname!=null'</span>&gt;sname,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'birthday!=null'</span>&gt;birthday,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'gender!=null'</span>&gt;gender,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'telcode!=null'</span>&gt;telcode,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'mark!=null'</span>&gt;mark&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/trim&gt;</span><br><span class="line"></span><br><span class="line">&lt;trim prefix=<span class="string">"values("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'id!=null'</span>&gt;<span class="comment">#&#123;id&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'sname!=null'</span>&gt;<span class="comment">#&#123;sname&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'birthday!=null'</span>&gt;<span class="comment">#&#123;birthday&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'gender!=null'</span>&gt;<span class="comment">#&#123;gender&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'telcode!=null'</span>&gt;<span class="comment">#&#123;telcode&#125;,&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">'mark!=null'</span>&gt;<span class="comment">#&#123;mark&#125;&lt;/if&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/trim&gt;</span><br><span class="line"></span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<p>prefix为前缀 suffix为后缀 suffixOverrides结尾去除，</p>
<h3 id="注解形式"><a href="#注解形式" class="headerlink" title="注解形式"></a>注解形式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Select(<span class="string">"&lt;script&gt;\r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"select * from book \r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;where&gt;\r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;if test=\"name!=null\"&gt;book_name = #&#123;name&#125;&lt;/if&gt;\r\n"</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">"&lt;/where&gt;&lt;/script&gt;\r\n"</span>)</span><br><span class="line"></span><br><span class="line">public Book selectbookmessage(String name);</span><br></pre></td></tr></table></figure>
<p>如果是动态标签那么要加上<script></script></p>
<h3 id="sql-2"><a href="#sql-2" class="headerlink" title="sql"></a><foreach>sql</foreach></h3><p>item：集合中元素迭代时的别名，该参数为必选。<br>index：在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选<br>open：foreach代码的开始符号，一般是(和close=”)”合用。常用在in(),values()时。该参数可选<br>separator：元素之间的分隔符，例如在in()的时候，separator=”,”会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。<br>close: foreach代码的关闭符号，一般是)和open=”(“合用。常用在in(),values()时。该参数可选。<br>collection: 要做foreach的对象，作为入参时，List对象默认用”list”代替作为键，数组对象有”array”代替作为键，Map对象没有默认的键。当然在作为入参时可以使用@Param(“keyName”)来设置键，设置keyName后，list,array将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：如果User有属性List ids。入参是User对象，那么这个collection = “ids”.如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = “ids.id”</p>
<p>list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"countByUserList"</span> resultType=<span class="string">"_int"</span> parameterType=<span class="string">"list"</span>&gt;</span><br><span class="line">select count(*) from users</span><br><span class="line">  &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">    id <span class="keyword">in</span></span><br><span class="line">    &lt;foreach item=<span class="string">"item"</span> collection=<span class="string">"list"</span> separator=<span class="string">","</span> open=<span class="string">"("</span> close=<span class="string">")"</span> index=<span class="string">""</span>&gt;</span><br><span class="line">      <span class="comment">#&#123;item.id, jdbcType=NUMERIC&#125;</span></span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">  &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"dynamicForeach2Test"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">     select * from t_blog <span class="built_in">where</span> id <span class="keyword">in</span></span><br><span class="line">     &lt;foreach collection=<span class="string">"array"</span> index=<span class="string">"index"</span> item=<span class="string">"item"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">          <span class="comment">#&#123;item&#125;</span></span><br><span class="line">     &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"> public void <span class="function"><span class="title">dynamicForeach2Test</span></span>() &#123;</span><br><span class="line">     SqlSession session = Util.getSqlSessionFactory().openSession();</span><br><span class="line">     BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">     int[] ids = new int[] &#123;1,3,6,9&#125;;</span><br><span class="line">     List blogs = blogMapper.dynamicForeach2Test(ids);</span><br><span class="line">     <span class="keyword">for</span> (Blog blog : blogs)</span><br><span class="line">     System.out.println(blog);</span><br><span class="line">     session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>map</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testInserts</span></span>()&#123;</span><br><span class="line">    Map&lt;String,List&lt;Object&gt;&gt; param = new HashMap&lt;String,List&lt;Object&gt;&gt;();</span><br><span class="line">    List&lt;Object&gt; l = new ArrayList&lt;Object&gt;();</span><br><span class="line">    User u1 = new User();</span><br><span class="line">    u1.setUserName(<span class="string">"u1_name"</span>);</span><br><span class="line">    u1.setPassword(<span class="string">"11111"</span>);</span><br><span class="line">    u1.setName(<span class="string">"u1"</span>);</span><br><span class="line">    u1.setSex(1);</span><br><span class="line">    u1.setAge(20);</span><br><span class="line">    u1.setCreated(new Date());</span><br><span class="line">    u1.setBirthday(new Date());</span><br><span class="line">    u1.setUpdated(new Date());</span><br><span class="line">    User u2 = new User();</span><br><span class="line">    u2.setUserName(<span class="string">"u2_name"</span>);</span><br><span class="line">    u2.setPassword(<span class="string">"11111"</span>);</span><br><span class="line">    u2.setName(<span class="string">"u2"</span>);</span><br><span class="line">    u2.setSex(1);</span><br><span class="line">    u2.setAge(20);</span><br><span class="line">    u2.setCreated(new Date());</span><br><span class="line">    u2.setBirthday(new Date());</span><br><span class="line">    u2.setUpdated(new Date());</span><br><span class="line">    l.add(u1);</span><br><span class="line">    l.add(u2);</span><br><span class="line">    param.put(<span class="string">"keys"</span>, l);</span><br><span class="line">    int count = this.userMapper.insertUsers(param);</span><br><span class="line">    System.out.println(<span class="string">"..............."</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">//如果使用@param(<span class="string">"xxx"</span>)注解的话，foreach集合中的colleciton的值可以是<span class="string">"xxx.keys"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;insert id=<span class="string">"insertUsers"</span>&gt;</span><br><span class="line">   insert into tb_user</span><br><span class="line">   ( id, user_name, password,sex,</span><br><span class="line">     name, age, birthday, created, updated)</span><br><span class="line">   values</span><br><span class="line">   &lt;foreach collection=<span class="string">"keys"</span> item=<span class="string">"value"</span>  separator=<span class="string">","</span>&gt;</span><br><span class="line">      (null,<span class="comment">#&#123;value.userName&#125;,#&#123;value.password&#125;,#&#123;value.sex&#125;,#&#123;value.name&#125;,#&#123;value.age&#125;,#&#123;value.birthday&#125;,#&#123;value.created&#125;,#&#123;value.updated&#125;)</span></span><br><span class="line">   &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<h3 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package org.Dao.processor;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line">import org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class SexTypeHandler extends BaseTypeHandler&lt;String&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (parameter.equals(<span class="string">"男"</span>)) &#123;</span><br><span class="line">            ps.setString(i,<span class="string">"1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ps.setString(i,<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">        <span class="built_in">return</span> rs.getString(columnName).equals(<span class="string">"1"</span>)?<span class="string">"男"</span>:<span class="string">"女"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">        <span class="built_in">return</span> rs.getString(columnIndex).equals(<span class="string">"1"</span>)?<span class="string">"男"</span>:<span class="string">"女"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">        <span class="built_in">return</span> cs.getString(columnIndex).equals(<span class="string">"1"</span>)?<span class="string">"男"</span>:<span class="string">"女"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conf.xml配置</span><br><span class="line">&lt;!-- 创建处理器--&gt;</span><br><span class="line">    &lt;typeHandlers&gt;</span><br><span class="line">        &lt;typeHandler handler=<span class="string">"org.Dao.processor.StringTypeHandler"</span> javaType=<span class="string">"String"</span> jdbcType=<span class="string">"VARCHAR"</span>/&gt;</span><br><span class="line">        &lt;typeHandler handler=<span class="string">"org.Dao.processor.SexTypeHandler"</span> javaType=<span class="string">"String"</span> jdbcType=<span class="string">"VARCHAR"</span>/&gt;</span><br><span class="line">        &lt;typeHandler handler=<span class="string">"org.Dao.processor.validTypeHandle"</span> /&gt;</span><br><span class="line">    &lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>股票收益</title>
    <url>/2021/02/24/%E8%82%A1%E7%A5%A8%E6%94%B6%E7%9B%8A/</url>
    <content><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><table>
<thead>
<tr>
<th align="center">今开</th>
<th align="center">昨收</th>
<th align="center">最高</th>
<th align="center">最低</th>
<th>成交量</th>
<th>成交额</th>
<th>涨幅</th>
<th>涨跌</th>
<th>最新</th>
<th>时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String devKey = <span class="string">"SCT11703TSTtespqWOloIs0d0xVS9FEbmx2ts3"</span>;</span><br><span class="line"></span><br><span class="line">CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">    CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerCrawler</span><span class="params">(String[] codes)</span></span>&#123;</span><br><span class="line">        String message = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(String s : codes)&#123;</span><br><span class="line">            String url = <span class="string">"http://56.push2his.eastmoney.com/api/qt/stock/kline/get?"</span> +</span><br><span class="line">                    <span class="string">"secid="</span>+s+</span><br><span class="line">                    <span class="string">"&amp;fields1=f1%2Cf2%2Cf3%2Cf4%2Cf5%2Cf6&amp;fields2=f51%2Cf52%2Cf53%2Cf54%2Cf55%2Cf56%2Cf57%2Cf58%2Cf59%2Cf60%2Cf61"</span> +</span><br><span class="line">                    <span class="string">"&amp;klt=101"</span> +</span><br><span class="line">                    <span class="string">"&amp;fqt=0"</span> +</span><br><span class="line">                    <span class="string">"&amp;end=20500101"</span> +</span><br><span class="line">                    <span class="string">"&amp;lmt=7"</span>;</span><br><span class="line">            message += returnMessage(url);</span><br><span class="line">        &#125;</span><br><span class="line">        test(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        String url = <span class="string">"https://sctapi.ftqq.com/"</span>+devKey;</span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        List&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">        params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"title"</span>,<span class="string">"今日行情"</span>));</span><br><span class="line">        params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"desp"</span>,message));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpPost.setHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(params, <span class="string">"utf-8"</span>));</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            String content = EntityUtils.toString(response.getEntity(),<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">returnMessage</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            String content = EntityUtils.toString(response.getEntity(),<span class="string">"utf-8"</span>);</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(content).getJSONObject(<span class="string">"data"</span>);</span><br><span class="line">            String title = (String)jsonObject.get(<span class="string">"name"</span>);</span><br><span class="line">            JSONArray klines = jsonObject.getJSONArray(<span class="string">"klines"</span>);</span><br><span class="line">            String message = <span class="string">"## "</span>+title+<span class="string">"\n"</span>;</span><br><span class="line">            message += <span class="string">"|今开|最新|最高|最低|成交量|成交额|涨幅|涨跌|时间|\n"</span> +</span><br><span class="line">                    <span class="string">"| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;klines.size();i++)&#123;</span><br><span class="line">                String str = (String)klines.get(i);</span><br><span class="line">                String[] split = str.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;split.length;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==<span class="number">7</span>||j==<span class="number">10</span>)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(j==<span class="number">8</span>||j==<span class="number">9</span>) &#123;</span><br><span class="line">                        message += <span class="string">"|"</span> + split[j] + <span class="string">"%"</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (j==<span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="keyword">long</span> l = Long.parseLong(split[j]);</span><br><span class="line">                        Double t = (<span class="keyword">double</span>) l / <span class="number">10000</span>;</span><br><span class="line">                        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00"</span>);</span><br><span class="line">                        String number = df.format(t);</span><br><span class="line">                        message += <span class="string">"|"</span> + number + <span class="string">"万手"</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">6</span>)&#123;</span><br><span class="line">                        Double aDouble = <span class="keyword">new</span> Double(split[j]);</span><br><span class="line">                        Double t =  aDouble /<span class="number">100000000.0</span>;</span><br><span class="line">                        String number = String.format(<span class="string">"%.2f"</span>, t);</span><br><span class="line">                        message += <span class="string">"|"</span> + number + <span class="string">"亿"</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        message += <span class="string">"|"</span>+split[j];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                message += <span class="string">"|"</span>+split[<span class="number">0</span>]+<span class="string">"|\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过server酱使用消息推送，通过抓包获取数据</p>
]]></content>
  </entry>
</search>
